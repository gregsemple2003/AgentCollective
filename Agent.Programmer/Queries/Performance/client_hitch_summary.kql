//-------------------------------------------------------------------------
// Parameters
//-------------------------------------------------------------------------

// This configures how many of the bottom stack frames to use when creating the hitch signature.
// More symbols means more context, but greater chance of fragmenting this hitch into multiple
// buckets if it has multiple diffrent callers.
let maxBottomSymbols = 20;

// This configures how deeply we want to explore the hotpath (highest % chain of children),
// when calculating the hitch signature.  The lower you set it, the more likely you'll 
// get less relevant parts of the hotpath in the signature.  The higher you set it,
// the less interesting information you'll see.
let minPercentForHotPath = 30.0;

// FILTERS (for debug queries)
let hitchContainsText = "";
let startTime = ago(14d);
let hitchUserName = "";
let hitchExcludedUsers = dynamic(["GSSteamTester11"]);

//-------------------------------------------------------------------------
// Raw query for hitch reports using minimal filters
//-------------------------------------------------------------------------
let hitchReportsRaw = GameServerLogs
//| where Profile has "greg"
| where isnull(startTime) or TimeGenerated > startTime
| where Message endswith "Client hitch"
| extend HitchTimeMillis = todouble(
    extract(
        @"\""realTime\""\s*:\s*\""\s*([\d\.]+)\s*ms",
        1,
        tostring(JsonDetails)
    )
)
| extend HitchId = hash_md5(strcat(Host, "_", TimeGenerated))
| extend JsonText = tostring(JsonDetails)
| project-away JsonDetails
| extend CPU              = extract(@"""processorType""\s*:\s*""(.*?)""", 1, JsonText)
| extend CPUFrequency     = extract(@"""processorFrequency""\s*:\s*(.*?),", 1, JsonText)
| extend CPUProcessorCount= extract(@"""processorCount""\s*:\s*(.*?),", 1, JsonText)
| extend CPU              = strcat(CPU, " freq=", CPUFrequency, ", processors=", CPUProcessorCount)
| extend GPU              = extract(@"""gpu""\s*:\s*""(.*?)""", 1, JsonText)
| extend GPUVRAM          = extract(@"""maxVramMemory""\s*:\s*(.*?)[,}]", 1, JsonText)
| extend GPU              = strcat(GPU, " vram=", GPUVRAM)
| extend UserName           = extract(@"\""userName\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend Scene           = extract(@"\""scene\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend PlayfabId       = extract(@"\""playfabID\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend ClientSessionId = extract(@"\""clientSessionID\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend HotPathArray = extractjson("$.hotPath", JsonText, typeof(dynamic))
| project-away JsonText
| project-reorder TimeGenerated, Host, HitchId, Scene, PlayfabId, UserName, ClientSessionId
//| where isempty(hitchContainsText) or JsonText contains hitchContainsText // DEBUGGING
//| where isempty(hitchUserName) or UserName contains hitchUserName // DEBUGGING
| where UserName !in (hitchExcludedUsers)
//| where isnotnull(HotPathArray) and gettype(HotPathArray) == "array" 
;

//-------------------------------------------------------------------------
// Function to classify a function name to a category e.g. GPU, UI
//-------------------------------------------------------------------------
let classifyFunc = (fn:string)
{
    case(
        // GPU
        fn contains "WaitForLastPresentation"                     , "GPU",
        fn contains "WaitForPendingPresent"                       , "GPU",
        fn contains "EndGraphicsJobs"                             , "GPU",

        // Render
        fn contains "PlayerRender"                                , "Render",

        // UI
        fn contains "UIPanel_Open"                                , "UI",
        fn contains "EpochInputManager_HandleButtonPress"         , "UI",
        fn contains "EpochInputManager_Update"                    , "UI",
        fn contains "SetRequestedResolution"                      , "UI",
        fn contains "UI::InitializeCanvasManager"                 , "UI",
        fn contains "RewiredStandaloneInputModule_Process"        , "UI",
        fn contains "U3CProcessInput"                             , "UI",

        // Load
        fn contains "Resources_Load"                              , "Load",
        fn contains "AssetBundleManager_Load"                     , "Load",

        // GC
        fn contains "GC_collect"                                  , "GC",

        // Gameplay
        fn contains "GeneratedMessageRouter_RouteMessage"         , "Gameplay",
        fn contains "UpdateSystem_Update"                         , "Gameplay",
        fn contains "UpdateSystem_LateUpdate"                     , "Gameplay",
        fn contains "ClientNetworkService_ReceiveCallback"        , "Gameplay",

        // Particles
        fn contains "ParticleSystem"                              , "Particles",

        // Steam
        fn contains "Steam_"                                      , "Steam",

        // Physics
        fn contains "Simulate@PhysicsManager"                     , "Physics",

                                                     "Other"
    )
};

//------------------------------------------------------------------------------------------
// Function to extract function frame attributes (used on hot path)
//------------------------------------------------------------------------------------------
let parseHotPath = (raw:string)
{
    bag_pack(
        // e.g. "[26.0 / 100.0%] …"
        'sampleCount', todouble(extract(@"^\[(\d+(\.\d+)?)",                   1, raw)),
        'percent',     todouble(extract(@"^\[\d+(\.\d+)? / (\d+(\.\d+)?)%",    2, raw)),
        // e.g. "UnityMain()"
        'function',    trim_end('()', extract(@"%] ([^(]+)\(",                1, raw)),
        // e.g. "UnityPlayer.dll"
        'module',      extract(@"\(([^)]+)\)\s*$",                            1, raw)
    )
};

//------------------------------------------------------------------------------------------
// Code generation logic (query optimization)
//------------------------------------------------------------------------------------------
let maxHotPathArraySize = 40;
let codeGenerateHotPathQuery = range idx from 0 to (maxHotPathArraySize-1) step 1
| extend assignstmt = strcat(
    "| extend HotPathInfo", idx, " = parseHotPath(HotPathArray[", idx, "])"
  )
| extend iffstmt = strcat(
    "iff(todouble(HotPathInfo", maxHotPathArraySize-idx-1, ".percent) > 30, pack_array(HotPathInfo", maxHotPathArraySize-idx-1, ".function), dynamic([]))", // reverse iteration order
     iff(idx < (maxHotPathArraySize-1), ",", "")
  )
| extend categoryiffstmt = strcat(
     "iff(todouble(HotPathInfo", maxHotPathArraySize-idx-1, ".percent) > 30, pack_array(classifyFunc(HotPathInfo", maxHotPathArraySize-idx-1, ".function)), dynamic([]))", // reverse iteration order
     iff(idx < (maxHotPathArraySize-1), ",", "")
  )
| project assignstmt, iffstmt, categoryiffstmt
;
//codeGenerateHotPathQuery

//------------------------------------------------------------------------------------------
// Hitch reports per row with signature (hot path fragment)
//------------------------------------------------------------------------------------------
let hitchReportsWithSignature = hitchReportsRaw
// Extract hot path into columns, this is 3x faster than mv-expand
| extend HotPathInfo0 = parseHotPath(HotPathArray[0])
| extend HotPathInfo1 = parseHotPath(HotPathArray[1])
| extend HotPathInfo2 = parseHotPath(HotPathArray[2])
| extend HotPathInfo3 = parseHotPath(HotPathArray[3])
| extend HotPathInfo4 = parseHotPath(HotPathArray[4])
| extend HotPathInfo5 = parseHotPath(HotPathArray[5])
| extend HotPathInfo6 = parseHotPath(HotPathArray[6])
| extend HotPathInfo7 = parseHotPath(HotPathArray[7])
| extend HotPathInfo8 = parseHotPath(HotPathArray[8])
| extend HotPathInfo9 = parseHotPath(HotPathArray[9])
| extend HotPathInfo10 = parseHotPath(HotPathArray[10])
| extend HotPathInfo11 = parseHotPath(HotPathArray[11])
| extend HotPathInfo12 = parseHotPath(HotPathArray[12])
| extend HotPathInfo13 = parseHotPath(HotPathArray[13])
| extend HotPathInfo14 = parseHotPath(HotPathArray[14])
| extend HotPathInfo15 = parseHotPath(HotPathArray[15])
| extend HotPathInfo16 = parseHotPath(HotPathArray[16])
| extend HotPathInfo17 = parseHotPath(HotPathArray[17])
| extend HotPathInfo18 = parseHotPath(HotPathArray[18])
| extend HotPathInfo19 = parseHotPath(HotPathArray[19])
| extend HotPathInfo20 = parseHotPath(HotPathArray[20])
| extend HotPathInfo21 = parseHotPath(HotPathArray[21])
| extend HotPathInfo22 = parseHotPath(HotPathArray[22])
| extend HotPathInfo23 = parseHotPath(HotPathArray[23])
| extend HotPathInfo24 = parseHotPath(HotPathArray[24])
| extend HotPathInfo25 = parseHotPath(HotPathArray[25])
| extend HotPathInfo26 = parseHotPath(HotPathArray[26])
| extend HotPathInfo27 = parseHotPath(HotPathArray[27])
| extend HotPathInfo28 = parseHotPath(HotPathArray[28])
| extend HotPathInfo29 = parseHotPath(HotPathArray[29])
| extend HotPathInfo30 = parseHotPath(HotPathArray[30])
| extend HotPathInfo31 = parseHotPath(HotPathArray[31])
| extend HotPathInfo32 = parseHotPath(HotPathArray[32])
| extend HotPathInfo33 = parseHotPath(HotPathArray[33])
| extend HotPathInfo34 = parseHotPath(HotPathArray[34])
| extend HotPathInfo35 = parseHotPath(HotPathArray[35])
| extend HotPathInfo36 = parseHotPath(HotPathArray[36])
| extend HotPathInfo37 = parseHotPath(HotPathArray[37])
| extend HotPathInfo38 = parseHotPath(HotPathArray[38])
| extend HotPathInfo39 = parseHotPath(HotPathArray[39])

// Filter functions that are > min % and coalesce into an array
| extend HotPathSignatureArray = array_slice(
    array_concat(
        iff(todouble(HotPathInfo39.percent) > minPercentForHotPath, pack_array(HotPathInfo39.function), dynamic([])),
        iff(todouble(HotPathInfo38.percent) > minPercentForHotPath, pack_array(HotPathInfo38.function), dynamic([])),
        iff(todouble(HotPathInfo37.percent) > minPercentForHotPath, pack_array(HotPathInfo37.function), dynamic([])),
        iff(todouble(HotPathInfo36.percent) > minPercentForHotPath, pack_array(HotPathInfo36.function), dynamic([])),
        iff(todouble(HotPathInfo35.percent) > minPercentForHotPath, pack_array(HotPathInfo35.function), dynamic([])),
        iff(todouble(HotPathInfo34.percent) > minPercentForHotPath, pack_array(HotPathInfo34.function), dynamic([])),
        iff(todouble(HotPathInfo33.percent) > minPercentForHotPath, pack_array(HotPathInfo33.function), dynamic([])),
        iff(todouble(HotPathInfo32.percent) > minPercentForHotPath, pack_array(HotPathInfo32.function), dynamic([])),
        iff(todouble(HotPathInfo31.percent) > minPercentForHotPath, pack_array(HotPathInfo31.function), dynamic([])),
        iff(todouble(HotPathInfo30.percent) > minPercentForHotPath, pack_array(HotPathInfo30.function), dynamic([])),
        iff(todouble(HotPathInfo29.percent) > minPercentForHotPath, pack_array(HotPathInfo29.function), dynamic([])),
        iff(todouble(HotPathInfo28.percent) > minPercentForHotPath, pack_array(HotPathInfo28.function), dynamic([])),
        iff(todouble(HotPathInfo27.percent) > minPercentForHotPath, pack_array(HotPathInfo27.function), dynamic([])),
        iff(todouble(HotPathInfo26.percent) > minPercentForHotPath, pack_array(HotPathInfo26.function), dynamic([])),
        iff(todouble(HotPathInfo25.percent) > minPercentForHotPath, pack_array(HotPathInfo25.function), dynamic([])),
        iff(todouble(HotPathInfo24.percent) > minPercentForHotPath, pack_array(HotPathInfo24.function), dynamic([])),
        iff(todouble(HotPathInfo23.percent) > minPercentForHotPath, pack_array(HotPathInfo23.function), dynamic([])),
        iff(todouble(HotPathInfo22.percent) > minPercentForHotPath, pack_array(HotPathInfo22.function), dynamic([])),
        iff(todouble(HotPathInfo21.percent) > minPercentForHotPath, pack_array(HotPathInfo21.function), dynamic([])),
        iff(todouble(HotPathInfo20.percent) > minPercentForHotPath, pack_array(HotPathInfo20.function), dynamic([])),
        iff(todouble(HotPathInfo19.percent) > minPercentForHotPath, pack_array(HotPathInfo19.function), dynamic([])),
        iff(todouble(HotPathInfo18.percent) > minPercentForHotPath, pack_array(HotPathInfo18.function), dynamic([])),
        iff(todouble(HotPathInfo17.percent) > minPercentForHotPath, pack_array(HotPathInfo17.function), dynamic([])),
        iff(todouble(HotPathInfo16.percent) > minPercentForHotPath, pack_array(HotPathInfo16.function), dynamic([])),
        iff(todouble(HotPathInfo15.percent) > minPercentForHotPath, pack_array(HotPathInfo15.function), dynamic([])),
        iff(todouble(HotPathInfo14.percent) > minPercentForHotPath, pack_array(HotPathInfo14.function), dynamic([])),
        iff(todouble(HotPathInfo13.percent) > minPercentForHotPath, pack_array(HotPathInfo13.function), dynamic([])),
        iff(todouble(HotPathInfo12.percent) > minPercentForHotPath, pack_array(HotPathInfo12.function), dynamic([])),
        iff(todouble(HotPathInfo11.percent) > minPercentForHotPath, pack_array(HotPathInfo11.function), dynamic([])),
        iff(todouble(HotPathInfo10.percent) > minPercentForHotPath, pack_array(HotPathInfo10.function), dynamic([])),
        iff(todouble(HotPathInfo9.percent) > minPercentForHotPath, pack_array(HotPathInfo9.function), dynamic([])),
        iff(todouble(HotPathInfo8.percent) > minPercentForHotPath, pack_array(HotPathInfo8.function), dynamic([])),
        iff(todouble(HotPathInfo7.percent) > minPercentForHotPath, pack_array(HotPathInfo7.function), dynamic([])),
        iff(todouble(HotPathInfo6.percent) > minPercentForHotPath, pack_array(HotPathInfo6.function), dynamic([])),
        iff(todouble(HotPathInfo5.percent) > minPercentForHotPath, pack_array(HotPathInfo5.function), dynamic([])),
        iff(todouble(HotPathInfo4.percent) > minPercentForHotPath, pack_array(HotPathInfo4.function), dynamic([])),
        iff(todouble(HotPathInfo3.percent) > minPercentForHotPath, pack_array(HotPathInfo3.function), dynamic([])),
        iff(todouble(HotPathInfo2.percent) > minPercentForHotPath, pack_array(HotPathInfo2.function), dynamic([])),
        iff(todouble(HotPathInfo1.percent) > minPercentForHotPath, pack_array(HotPathInfo1.function), dynamic([])),
        iff(todouble(HotPathInfo0.percent) > minPercentForHotPath, pack_array(HotPathInfo1.function), dynamic([]))
    ),
    0, 15   // take the first 7 functions (starting from index 19) whose percent > minPercentForHotPath
)
| extend HotPathSignature = strcat_array(array_reverse(HotPathSignatureArray), '\n')    

// Classify each function and roll-up into a set
| extend HitchCategories = set_difference(
    set_union(
            iff(todouble(HotPathInfo39.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo39.function)), dynamic([])),
            iff(todouble(HotPathInfo38.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo38.function)), dynamic([])),
            iff(todouble(HotPathInfo37.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo37.function)), dynamic([])),
            iff(todouble(HotPathInfo36.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo36.function)), dynamic([])),
            iff(todouble(HotPathInfo35.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo35.function)), dynamic([])),
            iff(todouble(HotPathInfo34.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo34.function)), dynamic([])),
            iff(todouble(HotPathInfo33.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo33.function)), dynamic([])),
            iff(todouble(HotPathInfo32.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo32.function)), dynamic([])),
            iff(todouble(HotPathInfo31.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo31.function)), dynamic([])),
            iff(todouble(HotPathInfo30.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo30.function)), dynamic([])),
            iff(todouble(HotPathInfo29.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo29.function)), dynamic([])),
            iff(todouble(HotPathInfo28.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo28.function)), dynamic([])),
            iff(todouble(HotPathInfo27.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo27.function)), dynamic([])),
            iff(todouble(HotPathInfo26.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo26.function)), dynamic([])),
            iff(todouble(HotPathInfo25.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo25.function)), dynamic([])),
            iff(todouble(HotPathInfo24.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo24.function)), dynamic([])),
            iff(todouble(HotPathInfo23.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo23.function)), dynamic([])),
            iff(todouble(HotPathInfo22.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo22.function)), dynamic([])),
            iff(todouble(HotPathInfo21.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo21.function)), dynamic([])),
            iff(todouble(HotPathInfo20.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo20.function)), dynamic([])),
            iff(todouble(HotPathInfo19.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo19.function)), dynamic([])),
            iff(todouble(HotPathInfo18.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo18.function)), dynamic([])),
            iff(todouble(HotPathInfo17.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo17.function)), dynamic([])),
            iff(todouble(HotPathInfo16.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo16.function)), dynamic([])),
            iff(todouble(HotPathInfo15.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo15.function)), dynamic([])),
            iff(todouble(HotPathInfo14.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo14.function)), dynamic([])),
            iff(todouble(HotPathInfo13.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo13.function)), dynamic([])),
            iff(todouble(HotPathInfo12.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo12.function)), dynamic([])),
            iff(todouble(HotPathInfo11.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo11.function)), dynamic([])),
            iff(todouble(HotPathInfo10.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo10.function)), dynamic([])),
            iff(todouble(HotPathInfo9.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo9.function)), dynamic([])),
            iff(todouble(HotPathInfo8.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo8.function)), dynamic([])),
            iff(todouble(HotPathInfo7.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo7.function)), dynamic([])),
            iff(todouble(HotPathInfo6.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo6.function)), dynamic([])),
            iff(todouble(HotPathInfo5.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo5.function)), dynamic([])),
            iff(todouble(HotPathInfo4.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo4.function)), dynamic([])),
            iff(todouble(HotPathInfo3.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo3.function)), dynamic([])),
            iff(todouble(HotPathInfo2.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo2.function)), dynamic([])),
            iff(todouble(HotPathInfo1.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo1.function)), dynamic([])),
            iff(todouble(HotPathInfo0.percent) > minPercentForHotPath, pack_array(classifyFunc(HotPathInfo0.function)), dynamic([]))
    ),
    dynamic(["Other"])
)

// Render does wait on GPU present -> GPU hitch
| extend HitchCategories = iff(
    array_index_of(HitchCategories, 'GPU')    != -1 and
    array_index_of(HitchCategories, 'Render') != -1,
    set_difference(HitchCategories, dynamic(['Render'])),
    HitchCategories                       // otherwise keep as-is
)
;

//------------------------------------------------------------------------------------------
// Roll-up hitch reports by signature
//------------------------------------------------------------------------------------------
let hitchReportsBySignature = hitchReportsWithSignature // Step 0: query raw hitches
| summarize HitchCount = count(), 
            HitchCategories = make_set(HitchCategories),
            AverageMillis = avg(HitchTimeMillis), 
            MinMillis = min(HitchTimeMillis), 
            MaxMillis = max(HitchTimeMillis),
            NumUsersAffected = dcount(PlayfabId)
            by tostring(HotPathSignature)
;

//------------------------------------------------------------------------------------------
// Roll-up hitch reports by user (optional: hitch category)
//------------------------------------------------------------------------------------------
let targetHitchCategory = "GPU";
let hitchReportsInCategory = materialize(hitchReportsWithSignature // Step 0: query raw hitches
| where HitchCategories has targetHitchCategory
| summarize HitchCount = count(), 
            HitchCategories = make_set(HitchCategories),
            AverageMillis = avg(HitchTimeMillis), 
            MinMillis = min(HitchTimeMillis), 
            MaxMillis = max(HitchTimeMillis),
            NumUsersAffected = dcount(PlayfabId)
            by UserName, GPU
);
let totalHitchReports = toscalar(hitchReportsInCategory | summarize sum(HitchCount));
let hitchReportsByUser = hitchReportsInCategory
| top 25 by HitchCount desc                   // (optional) only show the top N
| extend HitchShare = 100.0 * HitchCount / totalHitchReports
| extend UserName = strcat(UserName, " / ", GPU)
| project UserName, HitchShare                // 1st column = X axis, 2nd = Y
| render barchart                           // vertical bars; use barchart for horizontal
        with (title = strcat(targetHitchCategory, " hitch share by user (%)"),
              yaxis = linear)
;

//------------------------------------------------------------------------------------------
// Roll-up hitch reports by category (renders as piechart)
//------------------------------------------------------------------------------------------
let hitchReportsByCategory = hitchReportsBySignature // Step 0: query raw hitches
//| take 10
//| where HotPathSignature contains "DetachParticleSystemsOnDeath_onDeath" | summarize sum(count_)
| extend NormalizedCategories = iif(array_length(HitchCategories) == 0, dynamic(['None']), HitchCategories) // Assign 'None' if category set is empty
| mv-expand HitchCategory = NormalizedCategories to typeof(string) // Expand categories; each hitch signature might contribute to multiple category counts
| summarize TotalHitchCount = sum(HitchCount) by HitchCategory // Sum hitches per category
| order by TotalHitchCount desc
| render piechart with (title="Hitch Frequency by Category") // Render as pie chart
//| summarize sum(HitchCount) by 1
;

//------------------------------------------------------------------------------------------
// Roll-up hitch reports by scene
//------------------------------------------------------------------------------------------
let hitchReportsByScene = hitchReportsWithSignature
//| where HitchCategories has targetHitchCategory
| summarize HitchCount = count(), 
            HitchCategories = make_set(HitchCategories),
            AverageMillis = avg(HitchTimeMillis), 
            MinMillis = min(HitchTimeMillis), 
            MaxMillis = max(HitchTimeMillis),
            NumUsersAffected = dcount(PlayfabId)
            by Scene
;

//------------------------------------------------------------------------------------------
// Roll-up playtime
//------------------------------------------------------------------------------------------
let playtime = GameServerLogs
| where isnull(startTime) or TimeGenerated > startTime
| where PlayerCount > 0
| summarize DeltaTimeSeconds = (max(TimeGenerated) - min(TimeGenerated)) / 1s, PlayerCount = max(PlayerCount) by bin(TimeGenerated, 1m), Host, ActiveScene
//| summarize sum(DeltaTimeSeconds) * PlayerCount by bin(TimeGenerated, 1d)
| sort by TimeGenerated desc
;

hitchReportsByCategory
//hitchReportsBySignature
//hitchReportsByUser
//hitchReportsByScene
//playtime