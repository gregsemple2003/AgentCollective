set query_plan = 'detailed';
// This configures how many of the bottom stack frames to use when creating the hitch signature.
// More symbols means more context, but greater chance of fragmenting this hitch into multiple
// buckets if it has multiple diffrent callers.
let maxBottomSymbols = 20;

// This configures how deeply we want to explore the hotpath (highest % chain of children),
// when calculating the hitch signature.  The lower you set it, the more likely you'll 
// get less relevant parts of the hotpath in the signature.  The higher you set it,
// the less interesting information you'll see.
let minPercentForHotPath = 30.0;

// FILTERS (for debug queries)
let hitchContainsText = "";
let hitchTimeAgo = ago(14d);
let hitchUserName = "";
let hitchExcludedUsers = dynamic(["AudioHead2001", "aoaofthefire", "Kufaz", "GSSteamTester11"]);

// Step 0: Query a bunch of hitch reports 
let baseHitchReports = GameServerLogs
//| where Profile has "greg"
| where isnull(hitchTimeAgo) or TimeGenerated > hitchTimeAgo
| where Message endswith "Client hitch"
| extend HitchTimeMillis = todouble(
    extract(
        @"\""realTime\""\s*:\s*\""\s*([\d\.]+)\s*ms",
        1,
        tostring(JsonDetails)
    )
)
//| serialize
| extend HitchId = hash_md5(strcat(Host, "_", TimeGenerated))
// | where JsonDetails contains ""
//| where JsonDetails contains_cs "hotPath"
// | where JsonDetails !contains "ActiveSceneChanged" // Filter loading hitches.
//     and JsonDetails !contains "Unity.exe"
//     and JsonDetails !contains "SetPlayerFocus"
//     and JsonDetails !contains "UnloadSceneInternal"
//     and JsonDetails !contains "Level_GenerateMinimap"
//     and JsonDetails !contains "UpdatePreloading"
//     and JsonDetails !contains "RestZoneScheduledUnloadAsync"
| extend JsonText = tostring(JsonDetails)
| project-away JsonDetails
| extend CPU              = extract(@"""processorType""\s*:\s*""(.*?)""", 1, JsonText)
| extend CPUFrequency     = extract(@"""processorFrequency""\s*:\s*(.*?),", 1, JsonText)
| extend CPUProcessorCount= extract(@"""processorCount""\s*:\s*(.*?),", 1, JsonText)
| extend CPU              = strcat(CPU, " freq=", CPUFrequency, ", processors=", CPUProcessorCount)
| extend GPU              = extract(@"""gpu""\s*:\s*""(.*?)""", 1, JsonText)
| extend GPUVRAM          = extract(@"""maxVramMemory""\s*:\s*(.*?)[,}]", 1, JsonText)
| extend GPU              = strcat(GPU, " vram=", GPUVRAM)
| extend UserName           = extract(@"\""userName\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend Scene           = extract(@"\""scene\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend PlayfabId       = extract(@"\""playfabID\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend ClientSessionId = extract(@"\""clientSessionID\""\s*:\s*\""(.*?)\""", 1, JsonText)
| extend HotPathArray = extractjson("$.hotPath", JsonText, typeof(dynamic))
| project-away JsonText
| project-reorder TimeGenerated, Host, HitchId, Scene, PlayfabId, UserName, ClientSessionId
//| where isempty(hitchContainsText) or JsonText contains hitchContainsText // DEBUGGING
//| where isempty(hitchUserName) or UserName contains hitchUserName // DEBUGGING
//| where UserName !in (hitchExcludedUsers)
//| where isnotnull(HotPathArray) and gettype(HotPathArray) == "array" 
;

//-------------------------------------------------------------------------
// Per-frame classifier
//-------------------------------------------------------------------------
let classifyFunc = (fn:string)
{
    case(
        // GPU
        fn contains "WaitForLastPresentation"                     , "GPU",
        fn contains "WaitForPendingPresent"                       , "GPU",
        fn contains "EndGraphicsJobs"                             , "GPU",

        // Render
        fn contains "PlayerRender"                                , "Render",

        // UI
        fn contains "UIPanel_Open"                                , "UI",
        fn contains "EpochInputManager_HandleButtonPress"         , "UI",
        fn contains "EpochInputManager_Update"                    , "UI",
        fn contains "SetRequestedResolution"                      , "UI",
        fn contains "UI::InitializeCanvasManager"                 , "UI",
        fn contains "RewiredStandaloneInputModule_Process"        , "UI",
        fn contains "U3CProcessInput"                             , "UI",

        // Load
        fn contains "Resources_Load"                              , "Load",
        fn contains "AssetBundleManager_Load"                     , "Load",

        // GC
        fn contains "GC_collect"                                  , "GC",

        // Gameplay
        fn contains "GeneratedMessageRouter_RouteMessage"         , "Gameplay",
        fn contains "UpdateSystem_Update"                         , "Gameplay",
        fn contains "UpdateSystem_LateUpdate"                     , "Gameplay",
        fn contains "ClientNetworkService_ReceiveCallback"        , "Gameplay",

        // Particles
        fn contains "ParticleSystem"                              , "Particles",

        // Steam
        fn contains "Steam_"                                      , "Steam",

        // Physics
        fn contains "Simulate@PhysicsManager"                     , "Physics",

                                                     "Other"
    )
};

//------------------------------------------------------------------------------------------
// Hitch reports - append hot path metadata
//------------------------------------------------------------------------------------------
let parseHotPath = (raw:string)
{
    bag_pack(
        // e.g. "[26.0 / 100.0%] …"
        'sampleCount', todouble(extract(@"^\[(\d+(\.\d+)?)",                   1, raw)),
        'percent',     todouble(extract(@"^\[\d+(\.\d+)? / (\d+(\.\d+)?)%",    2, raw)),
        // e.g. "UnityMain()"
        'function',    trim_end('()', extract(@"%] ([^(]+)\(",                1, raw)),
        // e.g. "UnityPlayer.dll"
        'module',      extract(@"\(([^)]+)\)\s*$",                            1, raw)
    )
};

let maxHotPathArraySize = 40;
let codeGenerateHotPathQuery = range idx from 0 to (maxHotPathArraySize-1) step 1
| extend assignstmt = strcat(
    "| extend HotPathInfo", idx, " = parseHotPath(HotPathArray[", idx, "])"
  )
| extend iffstmt = strcat(
    "iff(todouble(HotPathInfo", maxHotPathArraySize-idx-1, ".percent) > 30, pack_array(HotPathInfo", maxHotPathArraySize-idx-1, ".function), dynamic([]))", // reverse iteration order
     iff(idx < (maxHotPathArraySize-1), ",", "")
  )
| extend categoryiffstmt = strcat(
     "iff(todouble(HotPathInfo", maxHotPathArraySize-idx-1, ".percent) > 30, pack_array(classifyFunc(HotPathInfo", maxHotPathArraySize-idx-1, ".function)), dynamic([]))", // reverse iteration order
     iff(idx < (maxHotPathArraySize-1), ",", "")
  )
| project assignstmt, iffstmt, categoryiffstmt
;
//codeGenerateHotPathQuery

let hitchReportsWithHotPathInfo = baseHitchReports
| extend HotPathInfo0 = parseHotPath(HotPathArray[0])
| extend HotPathInfo1 = parseHotPath(HotPathArray[1])
| extend HotPathInfo2 = parseHotPath(HotPathArray[2])
| extend HotPathInfo3 = parseHotPath(HotPathArray[3])
| extend HotPathInfo4 = parseHotPath(HotPathArray[4])
| extend HotPathInfo5 = parseHotPath(HotPathArray[5])
| extend HotPathInfo6 = parseHotPath(HotPathArray[6])
| extend HotPathInfo7 = parseHotPath(HotPathArray[7])
| extend HotPathInfo8 = parseHotPath(HotPathArray[8])
| extend HotPathInfo9 = parseHotPath(HotPathArray[9])
| extend HotPathInfo10 = parseHotPath(HotPathArray[10])
| extend HotPathInfo11 = parseHotPath(HotPathArray[11])
| extend HotPathInfo12 = parseHotPath(HotPathArray[12])
| extend HotPathInfo13 = parseHotPath(HotPathArray[13])
| extend HotPathInfo14 = parseHotPath(HotPathArray[14])
| extend HotPathInfo15 = parseHotPath(HotPathArray[15])
| extend HotPathInfo16 = parseHotPath(HotPathArray[16])
| extend HotPathInfo17 = parseHotPath(HotPathArray[17])
| extend HotPathInfo18 = parseHotPath(HotPathArray[18])
| extend HotPathInfo19 = parseHotPath(HotPathArray[19])
| extend HotPathInfo20 = parseHotPath(HotPathArray[20])
| extend HotPathInfo21 = parseHotPath(HotPathArray[21])
| extend HotPathInfo22 = parseHotPath(HotPathArray[22])
| extend HotPathInfo23 = parseHotPath(HotPathArray[23])
| extend HotPathInfo24 = parseHotPath(HotPathArray[24])
| extend HotPathInfo25 = parseHotPath(HotPathArray[25])
| extend HotPathInfo26 = parseHotPath(HotPathArray[26])
| extend HotPathInfo27 = parseHotPath(HotPathArray[27])
| extend HotPathInfo28 = parseHotPath(HotPathArray[28])
| extend HotPathInfo29 = parseHotPath(HotPathArray[29])
| extend HotPathInfo30 = parseHotPath(HotPathArray[30])
| extend HotPathInfo31 = parseHotPath(HotPathArray[31])
| extend HotPathInfo32 = parseHotPath(HotPathArray[32])
| extend HotPathInfo33 = parseHotPath(HotPathArray[33])
| extend HotPathInfo34 = parseHotPath(HotPathArray[34])
| extend HotPathInfo35 = parseHotPath(HotPathArray[35])
| extend HotPathInfo36 = parseHotPath(HotPathArray[36])
| extend HotPathInfo37 = parseHotPath(HotPathArray[37])
| extend HotPathInfo38 = parseHotPath(HotPathArray[38])
| extend HotPathInfo39 = parseHotPath(HotPathArray[39])

    | extend HotPathSignatureArray = array_slice(
        array_concat(
            iff(todouble(HotPathInfo39.percent) > 30, pack_array(HotPathInfo39.function), dynamic([])),
            iff(todouble(HotPathInfo38.percent) > 30, pack_array(HotPathInfo38.function), dynamic([])),
            iff(todouble(HotPathInfo37.percent) > 30, pack_array(HotPathInfo37.function), dynamic([])),
            iff(todouble(HotPathInfo36.percent) > 30, pack_array(HotPathInfo36.function), dynamic([])),
            iff(todouble(HotPathInfo35.percent) > 30, pack_array(HotPathInfo35.function), dynamic([])),
            iff(todouble(HotPathInfo34.percent) > 30, pack_array(HotPathInfo34.function), dynamic([])),
            iff(todouble(HotPathInfo33.percent) > 30, pack_array(HotPathInfo33.function), dynamic([])),
            iff(todouble(HotPathInfo32.percent) > 30, pack_array(HotPathInfo32.function), dynamic([])),
            iff(todouble(HotPathInfo31.percent) > 30, pack_array(HotPathInfo31.function), dynamic([])),
            iff(todouble(HotPathInfo30.percent) > 30, pack_array(HotPathInfo30.function), dynamic([])),
            iff(todouble(HotPathInfo29.percent) > 30, pack_array(HotPathInfo29.function), dynamic([])),
            iff(todouble(HotPathInfo28.percent) > 30, pack_array(HotPathInfo28.function), dynamic([])),
            iff(todouble(HotPathInfo27.percent) > 30, pack_array(HotPathInfo27.function), dynamic([])),
            iff(todouble(HotPathInfo26.percent) > 30, pack_array(HotPathInfo26.function), dynamic([])),
            iff(todouble(HotPathInfo25.percent) > 30, pack_array(HotPathInfo25.function), dynamic([])),
            iff(todouble(HotPathInfo24.percent) > 30, pack_array(HotPathInfo24.function), dynamic([])),
            iff(todouble(HotPathInfo23.percent) > 30, pack_array(HotPathInfo23.function), dynamic([])),
            iff(todouble(HotPathInfo22.percent) > 30, pack_array(HotPathInfo22.function), dynamic([])),
            iff(todouble(HotPathInfo21.percent) > 30, pack_array(HotPathInfo21.function), dynamic([])),
            iff(todouble(HotPathInfo20.percent) > 30, pack_array(HotPathInfo20.function), dynamic([])),
            iff(todouble(HotPathInfo19.percent) > 30, pack_array(HotPathInfo19.function), dynamic([])),
            iff(todouble(HotPathInfo18.percent) > 30, pack_array(HotPathInfo18.function), dynamic([])),
            iff(todouble(HotPathInfo17.percent) > 30, pack_array(HotPathInfo17.function), dynamic([])),
            iff(todouble(HotPathInfo16.percent) > 30, pack_array(HotPathInfo16.function), dynamic([])),
            iff(todouble(HotPathInfo15.percent) > 30, pack_array(HotPathInfo15.function), dynamic([])),
            iff(todouble(HotPathInfo14.percent) > 30, pack_array(HotPathInfo14.function), dynamic([])),
            iff(todouble(HotPathInfo13.percent) > 30, pack_array(HotPathInfo13.function), dynamic([])),
            iff(todouble(HotPathInfo12.percent) > 30, pack_array(HotPathInfo12.function), dynamic([])),
            iff(todouble(HotPathInfo11.percent) > 30, pack_array(HotPathInfo11.function), dynamic([])),
            iff(todouble(HotPathInfo10.percent) > 30, pack_array(HotPathInfo10.function), dynamic([])),
            iff(todouble(HotPathInfo9.percent) > 30, pack_array(HotPathInfo9.function), dynamic([])),
            iff(todouble(HotPathInfo8.percent) > 30, pack_array(HotPathInfo8.function), dynamic([])),
            iff(todouble(HotPathInfo7.percent) > 30, pack_array(HotPathInfo7.function), dynamic([])),
            iff(todouble(HotPathInfo6.percent) > 30, pack_array(HotPathInfo6.function), dynamic([])),
            iff(todouble(HotPathInfo5.percent) > 30, pack_array(HotPathInfo5.function), dynamic([])),
            iff(todouble(HotPathInfo4.percent) > 30, pack_array(HotPathInfo4.function), dynamic([])),
            iff(todouble(HotPathInfo3.percent) > 30, pack_array(HotPathInfo3.function), dynamic([])),
            iff(todouble(HotPathInfo2.percent) > 30, pack_array(HotPathInfo2.function), dynamic([])),
            iff(todouble(HotPathInfo1.percent) > 30, pack_array(HotPathInfo1.function), dynamic([])),
            iff(todouble(HotPathInfo0.percent) > 30, pack_array(HotPathInfo1.function), dynamic([]))
        ),
        0, 15   // take the first 7 functions (starting from index 19) whose percent > 30
    )
    | extend HotPathSignature = strcat_array(array_reverse(HotPathSignatureArray), '\n')    
    | extend HitchCategories = set_difference(
        set_union(
                iff(todouble(HotPathInfo39.percent) > 30, pack_array(classifyFunc(HotPathInfo39.function)), dynamic([])),
                iff(todouble(HotPathInfo38.percent) > 30, pack_array(classifyFunc(HotPathInfo38.function)), dynamic([])),
                iff(todouble(HotPathInfo37.percent) > 30, pack_array(classifyFunc(HotPathInfo37.function)), dynamic([])),
                iff(todouble(HotPathInfo36.percent) > 30, pack_array(classifyFunc(HotPathInfo36.function)), dynamic([])),
                iff(todouble(HotPathInfo35.percent) > 30, pack_array(classifyFunc(HotPathInfo35.function)), dynamic([])),
                iff(todouble(HotPathInfo34.percent) > 30, pack_array(classifyFunc(HotPathInfo34.function)), dynamic([])),
                iff(todouble(HotPathInfo33.percent) > 30, pack_array(classifyFunc(HotPathInfo33.function)), dynamic([])),
                iff(todouble(HotPathInfo32.percent) > 30, pack_array(classifyFunc(HotPathInfo32.function)), dynamic([])),
                iff(todouble(HotPathInfo31.percent) > 30, pack_array(classifyFunc(HotPathInfo31.function)), dynamic([])),
                iff(todouble(HotPathInfo30.percent) > 30, pack_array(classifyFunc(HotPathInfo30.function)), dynamic([])),
                iff(todouble(HotPathInfo29.percent) > 30, pack_array(classifyFunc(HotPathInfo29.function)), dynamic([])),
                iff(todouble(HotPathInfo28.percent) > 30, pack_array(classifyFunc(HotPathInfo28.function)), dynamic([])),
                iff(todouble(HotPathInfo27.percent) > 30, pack_array(classifyFunc(HotPathInfo27.function)), dynamic([])),
                iff(todouble(HotPathInfo26.percent) > 30, pack_array(classifyFunc(HotPathInfo26.function)), dynamic([])),
                iff(todouble(HotPathInfo25.percent) > 30, pack_array(classifyFunc(HotPathInfo25.function)), dynamic([])),
                iff(todouble(HotPathInfo24.percent) > 30, pack_array(classifyFunc(HotPathInfo24.function)), dynamic([])),
                iff(todouble(HotPathInfo23.percent) > 30, pack_array(classifyFunc(HotPathInfo23.function)), dynamic([])),
                iff(todouble(HotPathInfo22.percent) > 30, pack_array(classifyFunc(HotPathInfo22.function)), dynamic([])),
                iff(todouble(HotPathInfo21.percent) > 30, pack_array(classifyFunc(HotPathInfo21.function)), dynamic([])),
                iff(todouble(HotPathInfo20.percent) > 30, pack_array(classifyFunc(HotPathInfo20.function)), dynamic([])),
                iff(todouble(HotPathInfo19.percent) > 30, pack_array(classifyFunc(HotPathInfo19.function)), dynamic([])),
                iff(todouble(HotPathInfo18.percent) > 30, pack_array(classifyFunc(HotPathInfo18.function)), dynamic([])),
                iff(todouble(HotPathInfo17.percent) > 30, pack_array(classifyFunc(HotPathInfo17.function)), dynamic([])),
                iff(todouble(HotPathInfo16.percent) > 30, pack_array(classifyFunc(HotPathInfo16.function)), dynamic([])),
                iff(todouble(HotPathInfo15.percent) > 30, pack_array(classifyFunc(HotPathInfo15.function)), dynamic([])),
                iff(todouble(HotPathInfo14.percent) > 30, pack_array(classifyFunc(HotPathInfo14.function)), dynamic([])),
                iff(todouble(HotPathInfo13.percent) > 30, pack_array(classifyFunc(HotPathInfo13.function)), dynamic([])),
                iff(todouble(HotPathInfo12.percent) > 30, pack_array(classifyFunc(HotPathInfo12.function)), dynamic([])),
                iff(todouble(HotPathInfo11.percent) > 30, pack_array(classifyFunc(HotPathInfo11.function)), dynamic([])),
                iff(todouble(HotPathInfo10.percent) > 30, pack_array(classifyFunc(HotPathInfo10.function)), dynamic([])),
                iff(todouble(HotPathInfo9.percent) > 30, pack_array(classifyFunc(HotPathInfo9.function)), dynamic([])),
                iff(todouble(HotPathInfo8.percent) > 30, pack_array(classifyFunc(HotPathInfo8.function)), dynamic([])),
                iff(todouble(HotPathInfo7.percent) > 30, pack_array(classifyFunc(HotPathInfo7.function)), dynamic([])),
                iff(todouble(HotPathInfo6.percent) > 30, pack_array(classifyFunc(HotPathInfo6.function)), dynamic([])),
                iff(todouble(HotPathInfo5.percent) > 30, pack_array(classifyFunc(HotPathInfo5.function)), dynamic([])),
                iff(todouble(HotPathInfo4.percent) > 30, pack_array(classifyFunc(HotPathInfo4.function)), dynamic([])),
                iff(todouble(HotPathInfo3.percent) > 30, pack_array(classifyFunc(HotPathInfo3.function)), dynamic([])),
                iff(todouble(HotPathInfo2.percent) > 30, pack_array(classifyFunc(HotPathInfo2.function)), dynamic([])),
                iff(todouble(HotPathInfo1.percent) > 30, pack_array(classifyFunc(HotPathInfo1.function)), dynamic([])),
                iff(todouble(HotPathInfo0.percent) > 30, pack_array(classifyFunc(HotPathInfo0.function)), dynamic([]))
        ),
        dynamic(["Other"])                                       //     and drop "Other"
    )
    
    // Render sometimes calls GPU present -> GPU hitch
    | extend HitchCategories = iff(
        array_index_of(HitchCategories, 'GPU')    != -1 and
        array_index_of(HitchCategories, 'Render') != -1,
        set_difference(HitchCategories, dynamic(['Render'])),
        HitchCategories                       // otherwise keep as-is
    )



;







// Step 1: Expand each row, tagging row/line order
let ExpandedHothPath = baseHitchReports 
| mv-expand with_itemindex=HotPathIndex HotPathLine = HotPathArray to typeof(string)
| project-away HotPathArray
| project-reorder HitchId, HotPathIndex, HotPathLine
;

// Step 2: Extract callstack info (SampleCount, Percent, FunctionName, ModulePath) per line
let ParsedHotPath = ExpandedHothPath
| extend SampleCount = extract(
    @"^\s*\[(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?%)\].*",
    1,
    HotPathLine
)
| extend SampleCount = todouble(SampleCount)
| extend Percent = extract(
    @"^\s*\[(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?%)\].*",
    2, HotPathLine
)
| extend Percent = todouble(replace_string(Percent, "%", ""))
| extend FunctionName = extract(
    @"\]\s*(?<FunctionName>[^()]+)\(\)",  // The regular expression
    1,                       // Name of the capture group
    HotPathLine                           // The string to parse
)
| extend FunctionName = coalesce(iif(strlen(FunctionName) == 0, "<unknown>", FunctionName), "<unknown>")
| extend FunctionName = replace_regex(FunctionName, "[0-9a-fA-F-]{8,}", "<guid>")
| extend ModulePath = extract(
    @"\(\)\s*(?<ModulePath>.*)$",  // Regex to capture everything after literal "()"
    1,
    HotPathLine
)
| extend ModulePath = coalesce(iif(strlen(ModulePath) == 0, "<unknown>", ModulePath), "<unknown>")
| extend IsCallstackLine = iif(HotPathLine contains "callstackTree", true, false)
| extend FrameCategory = case(
    // GPU
    FunctionName contains "WaitForLastPresentation" and Percent > 50, "GPU",
    FunctionName contains "WaitForPendingPresent" and Percent > 50, "GPU",
    FunctionName contains "EndGraphicsJobs" and Percent > 50, "GPU",

    // Render
    FunctionName contains "PlayerRender" and Percent > 50, "Render",

    // UI
    FunctionName contains "UIPanel_Open" and Percent > 50, "UI",
    FunctionName contains "EpochInputManager_HandleButtonPress" and Percent > 50, "UI",
    FunctionName contains "EpochInputManager_Update" and Percent > 50, "UI",
    FunctionName contains "SetRequestedResolution" and Percent > 50, "UI",
    FunctionName contains "UI::InitializeCanvasManager" and Percent > 50, "UI",
    FunctionName contains "RewiredStandaloneInputModule_Process" and Percent > 50, "UI",
    FunctionName contains "U3CProcessInput" and Percent > 50, "UI", // compiler-generated yield code for IEnumerable ProcessInput

    // Load
    FunctionName contains "Resources_Load" and Percent > 50, "Load",
    FunctionName contains "AssetBundleManager_Load" and Percent > 50, "Load",

    // GC
    FunctionName contains "GC_collect" and Percent > 50, "GC",

    // Gameplay
    FunctionName contains "GeneratedMessageRouter_RouteMessage" and Percent > 50, "Gameplay",
    FunctionName contains "UpdateSystem_Update" and Percent > 50, "Gameplay",
    FunctionName contains "UpdateSystem_LateUpdate" and Percent > 50, "Gameplay",
    FunctionName contains "ClientNetworkService_ReceiveCallback" and Percent > 50, "Gameplay",

    // Particles 
    FunctionName contains "ParticleSystem" and Percent > 50, "Particles",

    // Steam
    FunctionName contains "Steam_" and Percent > 50, "Steam",

    // Physics
    FunctionName contains "Simulate@PhysicsManager" and Percent > 50, "Physics",

    
    "Other"
  )
| project-reorder HitchId, SampleCount, Percent, FunctionName, FrameCategory, ModulePath, IsCallstackLine, HotPathLine
;

// Step 3: Filter lines to frames that are part of the hot path.
let FilteredHotPath = ParsedHotPath
| where Percent > minPercentForHotPath
| project-reorder HitchId
;

// Step 4: Calculate the hitch signature, the frames that are closest to the bottom while also providing enough context.
let HitchesWithSignature = FilteredHotPath
| order by HitchId asc, HotPathIndex desc
| summarize 
    HitchSignature = make_list(tostring(FunctionName), maxBottomSymbols), 
    HitchCategories = make_set(FrameCategory),
    Host = any(Host), 
    Profile = any(Profile),
    PlayfabId = any(PlayfabId), 
    ClientSessionId = any(ClientSessionId), 
    Scene = any(Scene), 
    HitchTimeMillis = any(HitchTimeMillis), 
    TimeGenerated = any(TimeGenerated),
    UserName = any(UserName)
    by HitchId
| extend HitchSignature = array_reverse(HitchSignature)
| extend HitchSignature = strcat_array(HitchSignature, "\n")
| extend HitchGroupId = hash_md5(HitchSignature)
| extend HitchCategories = set_difference(HitchCategories, dynamic(["Other"]))
| project-reorder HitchId, HitchSignature, HitchCategories, HitchGroupId, HitchTimeMillis
;

// // Step 4 (DEBUG VERSION), includes original json for verification
// let HitchesWithSignatureWithOriginalJson = HitchesWithSignature 
// | join kind=inner baseHitchReports on HitchId
// | project-reorder HitchId, HitchTimeMillis, HitchSignature, JsonText, UserName
// ;

// Step 5: Aggregate hitches and calculate counts and average per hitch signature
let AggregateHitches = HitchesWithSignature
| summarize 
    HitchCount = count(), 
    Hosts = make_set(Host),
    Profiles = make_set(Profile),
    UserNames = make_set(UserName),
    Scenes = make_set(Scene),
    HitchCategories = make_set(HitchCategories),
    AverageMillis = avg(HitchTimeMillis), 
    MinMillis = min(HitchTimeMillis), 
    MaxMillis = max(HitchTimeMillis), 
    NumAccountsAffected = dcount(PlayfabId), 
    HitchGroupId = any(HitchGroupId)
    by HitchSignature
| sort by HitchCount desc
| project-reorder HitchSignature, HitchCount, HitchCategories, MinMillis, AverageMillis, MaxMillis
;

// Compute session durations for all Hosts with hitches
let SessionDurations = GameServerLogs
| where Host in (baseHitchReports | summarize by Host)
| summarize MinTime = min(TimeGenerated), MaxTime = max(TimeGenerated) by Host
| extend SessionDurationHours = (MaxTime - MinTime) / 1h
;

let AggregateHitchesWithDurations = AggregateHitches
| mv-expand Hosts to typeof(string)
| join kind=inner SessionDurations on $left.Hosts == $right.Host
| summarize 
    TotalSessionHours = sum(SessionDurationHours), 
    HitchCount = any(HitchCount), 
    AverageMillis = any(AverageMillis), 
    MinMillis = any(MinMillis), 
    MaxMillis = any(MaxMillis), 
    NumAccountsAffected = any(NumAccountsAffected), 
    HitchCategories = make_set(HitchCategories),
    HitchGroupId = any(HitchGroupId)
    by HitchSignature
    //by HitchSignature
| extend HitchesPerHour = HitchCount / TotalSessionHours
| project-away TotalSessionHours
| project-reorder HitchSignature, HitchesPerHour, HitchCount, HitchCategories
| sort by HitchesPerHour desc
;

let AggregateHitchesBySession = HitchesWithSignature
| summarize min(TimeGenerated), max(TimeGenerated), HitchCount = count(), AverageMillis = avg(HitchTimeMillis), MinMillis = min(HitchTimeMillis), MaxMillis = max(HitchTimeMillis), NumAccountsAffected = dcount(PlayfabId), HitchGroupId = any(HitchGroupId) by HitchSignature, ClientSessionId
| sort by HitchCount desc
;

let TopHitchContribution = AggregateHitches
| serialize 
| extend SeverityNo = row_number()
| summarize TotalHitchCount = sum(HitchCount), TopHitchCount = sumif(HitchCount, SeverityNo <= 10) by 1
| extend TopHitchRatio = todouble(TopHitchCount) / TotalHitchCount
;

// GameServerLogs
// | where isnull(hitchTimeAgo) or TimeGenerated > hitchTimeAgo
// | where Host !contains "town"
// | summarize count(), min(TimeGenerated), max(TimeGenerated) by Session
// | extend PlaytimeHours = (max_TimeGenerated - min_TimeGenerated) / 1h
// | project-reorder min_TimeGenerated, PlaytimeHours
// | summarize sum(PlaytimeHours) by bin(min_TimeGenerated, 1d)
// | render timechart 

// GameServerLogs
// | where isnull(hitchTimeAgo) or TimeGenerated > hitchTimeAgo
// | where Host !contains "town"
// | where Message contains "ServerNetworkService adding a new connection from"
// | summarize count() by bin(TimeGenerated, 1d), Profile
// //| project-reorder TimeGenerated, Message
// // | summarize count(), min(TimeGenerated), max(TimeGenerated) by Session
// // | extend PlaytimeHours = (max_TimeGenerated - min_TimeGenerated) / 1h
// // | summarize sum(PlaytimeHours) by bin(min_TimeGenerated, 1d)
// | render timechart 

//codeGenerateHotPathQuery

hitchReportsWithHotPathInfo // Step 0: query raw hitches
| summarize count(), make_set(HitchCategories) by tostring(HotPathSignature)
//| where HotPathSignature contains "DetachParticleSystemsOnDeath_onDeath" | summarize sum(count_)

//ParsedHotPath // Step 2: extract percent and sample count
//FilteredHotPath // Step 3: remove low percent lines
//HitchesWithSignature
//HitchesWithSignatureWithOriginalJson // Step 4
//AggregateHitches // Step 5
//AggregateHitchesWithDurations
//TopHitchContribution
//AggregateHitchesBySession

//FindHitchByLocator

// Report on hitches custom
// GameServerLogs
// | where TimeGenerated > ago(3h)
// | where Message endswith "Client hitch"
// | extend HitchTimeMillis = todouble(
//     extract(
//         @"\""realTime\""\s*:\s*\""\s*([\d\.]+)\s*ms",
//         1,
//         tostring(JsonDetails)
//     )
// )
// | extend Scene = extract(@"\""scene\""\s*:\s*\""(.*?)\""", 1, tostring(JsonDetails))
// | extend Variant = extract(@'"sceneVariant":(.*?),', 1, tostring(JsonDetails))
// | project-reorder TimeGenerated, HitchTimeMillis, Scene, Variant, JsonDetails
// | sort by HitchTimeMillis desc

// // Report on hitches from a specific hitch group id
// let hitchGroupId = "e57c887a8194957b1f1f308aa6e18b38";
// HitchesWithSignatureWithOriginalJson
// | where HitchGroupId has hitchGroupId
// | sort by TimeGenerated desc
// | take 100

// AggregateHitches
// | extend NormalizedCategories = iif(array_length(HitchCategories) == 0, dynamic(['None']), HitchCategories) // Assign 'None' if category set is empty
// | where HitchCategories has "GC"
// //| mv-expand HitchCategory = NormalizedCategories to typeof(string) // Expand categories; each hitch signature might contribute to multiple category counts
// //| summarize TotalHitchCount = sum(HitchCount) by HitchCategory // Sum hitches per category
// //| order by TotalHitchCount desc
// //| render piechart with (title="Hitch Frequency by Category") // Render as pie chart
// //| summarize sum(HitchCount) by 1