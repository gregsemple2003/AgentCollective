// ─────────────────────────────────────────────────────────────────────────────
// Parameters – adjust as needed
// ─────────────────────────────────────────────────────────────────────────────
let InTimeRange = (ts:datetime)
{
    ts between (ago(10d) .. now())
    // $__timeFilter(ts) // for Grafana
};
let targetFrameMs  = 50.0;          // "hitch" threshold in milliseconds
let hitchBin       = 50.0;           // histogram bucket width (hitches per hour)
let minSessionTime = 1.0;           // ignore <1 s sessions
let maxSessionTime = 600.0;         // cap sessions at 10 min; set 0 to disable
let minBucketSampleCount = 3;      // minimum number of sessions in a bucket or it will be dropped
let targetProfiles = dynamic(["nightlyrelease"]);

// ─────────────────────────────────────────────────────────────────────────────
// Function to sanitize the GPU name we get so that it matches our benchmark data
// ─────────────────────────────────────────────────────────────────────────────
let NormalizeGpu = (model:string, vramMaxGB:int)
{
    // Brand prefix removal (case-insensitive)
    let base = trim(" ", replace_regex(model, @"(?i)^(NVIDIA\s+|AMD\s+)", ""));

    // VRAM suffix for selected models
    let needsVram = base in ("GeForce RTX 3060", "GeForce RTX 3050", "GeForce GTX 1060");
    let candidate = iif(needsVram,
        strcat(base, " ", tostring(vramMaxGB), "GB"),
        base);

    // Redirects (add more cases as needed)
    case(
        candidate == "GeForce GTX 1060 6GB", "GeForce GTX 1060 5GB",
        candidate == "GeForce RTX 3050 Laptop GPU", "GeForce RTX 3050 4GB Laptop GPU",
        candidate == "Custom GPU 0405 (RADV VANGOGH)", "Custom GPU 0405",
        candidate == "Custom GPU 0932 (RADV VANGOGH)", "Custom GPU 0932",
        candidate
    )
};

// ─────────────────────────────────────────────────────────────────────────────
// Base event pull
// ─────────────────────────────────────────────────────────────────────────────
let baseEventQuery = playfabevents
| where InTimeRange(Timestamp)
| where FullName_Name has "lastepoch_session_performance_metrics" 
    or (FullName_Name has "lastepoch_client_log" and EventData contains "frameTimeMetrics")// backwards compat with old event format
| extend JsonDetails = tostring(coalesce(EventData.json_details, EventData.jsonDetails)) // backwards compat with old event format
| extend TimeGenerated         = Timestamp
| extend PlayerClientSessionId = tostring(EventData.session)
| extend Scene                 = tostring(parse_json(JsonDetails).scene);

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per performance event
// ─────────────────────────────────────────────────────────────────────────────
let frameMetricsQuery = baseEventQuery
| where InTimeRange(TimeGenerated)
//| project TimeGenerated, PlayerClientSessionId, JsonDetails
| sort by TimeGenerated asc
| extend MetricsId  = strcat(TimeGenerated, "_", PlayerClientSessionId)
| extend d          = parse_json(JsonDetails)
| extend MetricsTime = todouble(d.elapsedTimeSeconds)        // session time at this packet
| extend OS = tostring(d.processMetrics.systemInfo.os)
| extend GPU = tostring(d.processMetrics.systemInfo.gpu)
| extend VramMaxGB = toint(round( todouble(d.processMetrics.systemInfo.maxVramMemory) / 1024.0 ))
// filter for platform (temp)
//| where GPU contains "VANG" // for steamdeck
//| where GPU contains "native gfx jobs" // for ps5

// | where  (MetricsTime >  minSessionTime)
//    and  (maxSessionTime == 0.0 or MetricsTime < maxSessionTime)
;

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per bucket
// ─────────────────────────────────────────────────────────────────────────────
let frameTimeBuckets = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets                        // → d_frameTimeMetrics_buckets
| extend b         = parse_json(d_frameTimeMetrics_buckets)
| extend BucketMin = todouble(b.min),
         BucketN   = todouble(b.n)
| project TimeGenerated, MetricsId, PlayerClientSessionId,
          BucketMin, BucketN, MetricsTime;

// ─────────────────────────────────────────────────────────────────────────────
// Roll-up frame time metrics per event (count frames > Xms)
// ─────────────────────────────────────────────────────────────────────────────
let hitchesPerEvent = frameTimeBuckets
| summarize
      FramesAbove     = sumif(BucketN, BucketMin >= targetFrameMs),
      SessionTimeSecs = max(MetricsTime)          // same for all rows in packet
      by MetricsId, TimeGenerated, PlayerClientSessionId
| where SessionTimeSecs > 0
| extend HitchesPerHour = FramesAbove / (SessionTimeSecs / 3600.0)
;

// ─────────────────────────────────────────────────────────────────────────────
// Optional – profile & account look-ups
// ─────────────────────────────────────────────────────────────────────────────
let clientSessionIdToProfile =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | summarize arg_max(TimeGenerated, Profile) by PlayerClientSessionId
    | where Profile !contains "-towns"
    | project PlayerClientSessionId, Profile;

let clientSessionIdToAccountName =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Message has "joined" and Message startswith "Player"
    | extend AccountName = extract(@"Player\s+'?([^']+?)'?\s+joined", 1, Message)
    | where isnotempty(AccountName)
    | summarize arg_max(TimeGenerated, AccountName) by PlayerClientSessionId
    | project PlayerClientSessionId, AccountName;

let clientSessionIdToUnity6 =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Profile !contains "-towns"
    | where PlayerClientSessionId !contains "HTTP" // for whatever reason, this can be an HTTP error
    | where isnotempty(PlayerClientSessionId)
        | summarize
        LastSeen = arg_max(TimeGenerated, UnityVersion)   // LastSeen = TimeGenerated
      by PlayerClientSessionId, UnityVersion
    //| summarize count() by UnityVersion, PlayerClientSessionId
    | where UnityVersion startswith "6000"
    //| project PlayerClientSessionId, Profile
;

// ─────────────────────────────────────────────────────────────────────────────
// Histogram – *overall* hitches per hour
// ─────────────────────────────────────────────────────────────────────────────
let hitchHistogram = hitchesPerEvent
| join kind = inner (clientSessionIdToProfile) on PlayerClientSessionId
| where Profile in (targetProfiles)
| summarize Sessions = count() by Bin = bin(HitchesPerHour, hitchBin)
| where Sessions > minBucketSampleCount
| order by Bin asc
| extend BinLabel = strcat(tostring(Bin), "-", tostring(Bin + hitchBin))
| project BinLabel, Sessions
| render columnchart
    with (
        title  = strcat("Hitches per Hour Histogram (>", tostring(targetFrameMs), " ms)"),
        xtitle = strcat("Hitches per Hour (", tostring(hitchBin), "-wide bins)"),
        ytitle = "Number of Sessions"
    )
;

// ─────────────────────────────────────────────────────────────────────────────
// Daily trend – hourly hitch-rate per profile
// ─────────────────────────────────────────────────────────────────────────────
let dailyHitchRate =
    hitchesPerEvent
    // tie each packet to its profile
    | join kind = inner (clientSessionIdToProfile) on PlayerClientSessionId
    | where Profile in (targetProfiles)
    // roll-up by calendar day (bin(...,1d)) – one row per day per profile
    | summarize
        Sessions           = count(),                     // how many packets in bucket
        Mean_HitchRate     = avg(HitchesPerHour),
        P50_HitchRate   = percentile(HitchesPerHour, 50),
        P75_HitchRate      = percentile(HitchesPerHour, 75),
        P95_HitchRate      = percentile(HitchesPerHour, 95),
        P99_HitchRate      = percentile(HitchesPerHour, 99)
        by Day = bin(TimeGenerated, 1d), Profile
    // optionally drop days with very few samples
    | where Sessions >= minBucketSampleCount
    | project Day, Profile, P50_HitchRate, P75_HitchRate, P95_HitchRate, P99_HitchRate
    | render timechart
          with (
              title  = strcat("Daily Hitch Rate – Percentiles  (>", tostring(targetFrameMs), " ms)"),
              ytitle = "Hitches per Hour",
              series = Profile
          )
;

// ─────────────────────────────────────────────────────────────────────────────
// Avg-frame-time per *packet*  →  P50 / P99 across packets
// ─────────────────────────────────────────────────────────────────────────────
let packetsWithStats = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets
| extend b = parse_json(d_frameTimeMetrics_buckets)
| extend
    BucketN   = todouble(b.n),
    BucketAvg = todouble(b.avg)
| where BucketN > 0 and isfinite(BucketAvg)

// weighted mean for this packet (MetricsId)
| extend NormalizedGpu = NormalizeGpu(GPU, VramMaxGB)
| join kind=leftouter (GpuScores) on $left.NormalizedGpu == $right.Model
| summarize
    PacketFrameCount = sum(BucketN),
    PacketTotalMs     = sum(BucketN * BucketAvg)
  by MetricsId, TimeGenerated, NormalizedGpu, Score, OS
| where PacketFrameCount > 0
| extend AvgFrameMs = PacketTotalMs / PacketFrameCount
;

// ─────────────────────────────────────────────────────────────────────────────
// Hitches-per-hour % over flat threshold
// ─────────────────────────────────────────────────────────────────────────────
let hitchRateThreshold = 200.0;

let packetsOverThreshold =
    hitchesPerEvent
    | summarize
        PacketsTotal = count(),
        PacketsOver  = countif(HitchesPerHour > hitchRateThreshold)
    | extend PercentOver = todouble(PacketsOver) / PacketsTotal * 100.0
    | project PacketsTotal, PacketsOver, PercentOver
;

// ─────────────────────────────────────────────────────────────────────────────
// Percentiles across packets
// ─────────────────────────────────────────────────────────────────────────────
let packetFrameTimePercentiles = packetsWithStats
| summarize
      Samples       = count(),
      P50_FPS = 1000.0 / percentile(AvgFrameMs, 50),
      P90_FPS = 1000.0 / percentile(AvgFrameMs, 90),
      P99_FPS = 1000.0 / percentile(AvgFrameMs, 99),
      P99_9_FPS = 1000.0 / percentile(AvgFrameMs, 99.9) 
      by bin(Score, 5000)
| sort by Score asc      
;

let packetFrameTimeChart = packetFrameTimePercentiles
| project-away Samples
| extend Target_60_FPS = 60.0 // the red line
| render linechart
      with (
          title   = "FPS percentiles vs. GPU score",
          xtitle  = "GPU score (lower bound of 5000-wide bin)",
          ytitle  = "Frames per second (FPS)"
      )
;

let packetSamplesChart = packetFrameTimePercentiles
| sort by Score asc
| extend ScoreDim = tostring(Score)
| project ScoreDim, Samples
| render columnchart
    with (
        title  = "Sample count vs. GPU score",
        xtitle = "GPU score (lower bound of 5 000-wide bin)",
        ytitle = "Sample count"     // y-axis is now the count
    )
;

//packetFrameTimeChart
//packetSamplesChart

// ─────────────────────────────────────────────────────────────────────────────
// Hitches-per-hour percentiles vs. GPU benchmark
// ─────────────────────────────────────────────────────────────────────────────
let packetsWithHitchRate =
    hitchesPerEvent
    // attach GPU model / VRAM so we can score it
     | join kind = inner
         (frameMetricsQuery
          | project MetricsId, PlayerClientSessionId, GPU, VramMaxGB)
         on MetricsId
     //  normalise the GPU name and look-up its synthetic benchmark score
     | extend NormalizedGpu = NormalizeGpu(GPU, VramMaxGB)
     | join kind = leftouter (GpuScores) on $left.NormalizedGpu == $right.Model
     | where isnotempty(Score)                          // drop un-scored GPUs
     | project MetricsId, HitchesPerHour, Score
;

// roll-up to percentile statistics per 5 000-wide GPU-score bin
let hitchRatePercentiles =
    packetsWithHitchRate
    | summarize
          Samples          = count(),
          P50_HitchesPerHr = percentile(HitchesPerHour, 50),
          P75_HitchesPerHr = percentile(HitchesPerHour, 75),
          P90_HitchesPerHr = percentile(HitchesPerHour, 90),
          P99_HitchesPerHr = percentile(HitchesPerHour, 99)
        by bin(Score, 5000)
;

// primary visual – multi-series line chart
let hitchRateChart =
    hitchRatePercentiles
    | project-away Samples
    | render linechart
        with (
            title  = strcat("Hitches per Hour vs. GPU score  (>", tostring(targetFrameMs), " ms)"),
            xtitle = "GPU score (lower bound of 5 000-wide bin)",
            ytitle = "Hitches per Hour"
        )
;

packetFrameTimeChart
//packetsWithHitchRate
//hitchRatePercentiles
//hitchRateChart


//packetsOverThreshold

//hitchHistogram
//dailyHitchRate
//serverUnity6Sessions
//dailyHitchRateUnity6

//dailyHitchRate

//GpuScores
//| where Model contains "3060"
//| sort by Score desc
// | where Model contains "GeForce"
// | where Model contains "6800"
// | extend Model = 
// 
