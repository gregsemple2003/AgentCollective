// ─────────────────────────────────────────────────────────────────────────────
// Parameters – adjust as needed
// ─────────────────────────────────────────────────────────────────────────────
let InTimeRange = (ts:datetime)
{
    //ts between (ago(1d) .. now())
    ts between (datetime(2025-04-19) .. datetime(2025-04-19)+1h)
    // $__timeFilter(ts) // for Grafana
};
let targetPlatform = "";
let IsMatchingPlatform = (platform:string)
{
    isempty(targetPlatform) or platform has targetPlatform
    //isempty("$platform") or platform has $platform // for Grafana
};
let targetFrameMs  = 50.0;          // "hitch" threshold in milliseconds
let hitchBin       = 50.0;           // histogram bucket width (hitches per hour)
let minSessionTime = 1.0;           // ignore <1 s sessions
let maxSessionTime = 600.0;         // cap sessions at 10 min; set 0 to disable
let minBucketSampleCount = 3;      // minimum number of sessions in a bucket or it will be dropped
let targetProfiles = dynamic(["nightlyrelease"]);
let SliceParam = "level";

// ─────────────────────────────────────────────────────────────────────────────
// Function to derive the player-platform from OS & NormalizedGpu
// ─────────────────────────────────────────────────────────────────────────────
let DetectPlatform = (os:string, normalizedGpu:string)
{
    // IMPORTANT — do the GPU checks first, then fall back to OS
    case(
        normalizedGpu contains_cs "VANG",              "SteamDeck",   // Steam Deck (Van Gogh APU)
        normalizedGpu contains_cs "native gfx jobs",   "PS5",         // PlayStation 5
        os has "windows",                               "Windows",    // any flavour of Windows
        "Unknown"                                                     // everything else
    )
};

// ─────────────────────────────────────────────────────────────────────────────
// Base event pull
// ─────────────────────────────────────────────────────────────────────────────
let baseEventQuery = playfabevents
| where InTimeRange(Timestamp)
| where FullName_Name has "lastepoch_session_performance_metrics" 
    or (FullName_Name has "lastepoch_client_log" and EventData contains "frameTimeMetrics")// backwards compat with old event format
| extend JsonDetails = tostring(coalesce(EventData.json_details, EventData.jsonDetails)) // backwards compat with old event format
| extend TimeGenerated         = Timestamp
| extend PlayerClientSessionId = tostring(EventData.session)
| extend Scene                 = tostring(parse_json(JsonDetails).scene);

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per performance event
// ─────────────────────────────────────────────────────────────────────────────
let frameMetricsQuery = baseEventQuery
| where InTimeRange(TimeGenerated)
//| project TimeGenerated, PlayerClientSessionId, JsonDetails
| sort by TimeGenerated asc
| extend MetricsId  = strcat(TimeGenerated, "_", PlayerClientSessionId)
| extend d          = parse_json(JsonDetails)
| extend MetricsTime = todouble(d.elapsedTimeSeconds)        // session time at this packet
| extend OS = tostring(d.processMetrics.systemInfo.os)
| extend GPU = tostring(d.processMetrics.systemInfo.gpu)
| extend VramMaxGB = toint(round( todouble(d.processMetrics.systemInfo.maxVramMemory) / 1024.0 ))
| extend MasterQuality = toint(d.graphicsConfig.masterQuality)
| extend DetailShadows = tobool(d.graphicsConfig.detailShadows)
| extend DisplayMode = toint(d.graphicsConfig.displayMode)
| extend VSyncLevel = toint(d.graphicsConfig.vSyncLevel)
| extend ScreenPixels = tolong(tolong(d.graphicsConfig.resolution.height) * tolong(d.graphicsConfig.resolution.width) / 1e6)
| extend LimitForegroundFPS = tobool(d.graphicsConfig.limitForegroundFPS)
| extend MaxForegroundFPS = iff(LimitForegroundFPS, toint(d.graphicsConfig.maxForegroundFPS), toint(200))
// filter for platform (temp)
//| where GPU contains "VANG" // for steamdeck
//| where GPU contains "native gfx jobs" // for ps5

// | where  (MetricsTime >  minSessionTime)
//    and  (maxSessionTime == 0.0 or MetricsTime < maxSessionTime)
;

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per bucket
// ─────────────────────────────────────────────────────────────────────────────
let frameTimeBuckets = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets                        // → d_frameTimeMetrics_buckets
| extend b         = parse_json(d_frameTimeMetrics_buckets)
| extend BucketMin = todouble(b.min),
         BucketN   = todouble(b.n)
| project TimeGenerated, MetricsId, PlayerClientSessionId,
          BucketMin, BucketN, MetricsTime;

// ─────────────────────────────────────────────────────────────────────────────
// Optional – profile & account look-ups
// ─────────────────────────────────────────────────────────────────────────────
let clientSessionIdToProfile =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | summarize arg_max(TimeGenerated, Profile) by PlayerClientSessionId
    | where Profile !contains "-towns"
    | project PlayerClientSessionId, Profile;

let clientSessionIdToAccountName =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Message has "joined" and Message startswith "Player"
    | extend AccountName = extract(@"Player\s+'?([^']+?)'?\s+joined", 1, Message)
    | where isnotempty(AccountName)
    | summarize arg_max(TimeGenerated, AccountName) by PlayerClientSessionId
    | project PlayerClientSessionId, AccountName;

let clientSessionIdToUnity6 =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Profile !contains "-towns"
    | where PlayerClientSessionId !contains "HTTP" // for whatever reason, this can be an HTTP error
    | where isnotempty(PlayerClientSessionId)
        | summarize
        LastSeen = arg_max(TimeGenerated, UnityVersion)   // LastSeen = TimeGenerated
      by PlayerClientSessionId, UnityVersion
    //| summarize count() by UnityVersion, PlayerClientSessionId
    | where UnityVersion startswith "6000"
    //| project PlayerClientSessionId, Profile
;

let accountToCharacterId = GameServerLogs
| where InTimeRange(TimeGenerated)
| where Message startswith "StartPlayerInitialisation operation completed"
| extend
    AccountId   = tostring(JsonDetails.MasterPlayerAccountId),
    CharacterId = tostring(JsonDetails.EntityId)
// Keep the most-recent login for each character in the time window
| summarize arg_max(TimeGenerated, AccountId) by CharacterId
| project CharacterId, AccountId
;
    
let clientSessionIdToAccountId = GameServerLogs
| where InTimeRange(TimeGenerated)
| where isnotempty(PlayerClientSessionId)
| where Message startswith "Player" and Message has "joined"
| extend AccountId = tostring(JsonDetails.MasterPlayerAccountId)
// keep the last session we saw for each account in the window
| summarize arg_max(TimeGenerated, PlayerClientSessionId) by AccountId
//| project-reorder TimeGenerated, PlayerClientSessionId, AccountId//, Message, JsonDetails
| project AccountId, PlayerClientSessionId
;

let levelUpEvents = GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Message startswith "Character levelled up"
    | extend d = parse_json(JsonDetails)
    | extend  CharacterId = tostring(d.Id),
              Class       = tostring(d.Labels.Class),
              Mastery     = tostring(d.Labels.Mastery),
              Level       = toint(d.NewLevel)
    | project TimeGenerated, CharacterId, Class, Mastery, Level
;

let levelUpEnriched =
    levelUpEvents
    // CharacterId → AccountId
    | join kind=leftouter accountToCharacterId on CharacterId
    // AccountId   → PlayerClientSessionId
    | join kind=leftouter clientSessionIdToAccountId on AccountId
    | project TimeGenerated, CharacterId, AccountId, PlayerClientSessionId,
              Class, Mastery, Level
;

// We associate each session id to a summary of level-up activity.
// It would be too expensive to find the closest matching level-up event for all session metrics events.
// So we approximate by tweening the level according to time through the session.
// This is linear, which might be off but most sessions are in a ~10 level range.
let clientSessionIdToLevelUpSummary = levelUpEnriched 
// how many level-ups per client session id
//| summarize count() by PlayerClientSessionId, AccountId, CharacterId
| summarize CharactersUsed = dcount(CharacterId)        // or count_distinct(CharacterId)
          , CharacterIds  = make_set(CharacterId, 100)  // optional: list them          
          , MinTime = min(TimeGenerated)
          , MaxTime = max(TimeGenerated)
          , MinLevel = min(Level)
          , MaxLevel = max(Level)
          , Class = any(Class) // only valid when CharactersUsed == 1
          , Mastery = any(Mastery) // only valid when CharactersUsed == 1
  by PlayerClientSessionId, AccountId
| where CharactersUsed == 1
//| summarize count() by CharactersUsed
;


// ─────────────────────────────────────────────────────────────────────────────
// Session metrics event statistics (one per row): FPS, hitch.
// ─────────────────────────────────────────────────────────────────────────────
let packetsCore = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets
| extend b = parse_json(d_frameTimeMetrics_buckets)
| extend
    BucketN   = todouble(b.n),
    BucketAvg = todouble(b.avg),
    BucketMin = todouble(b.min)
| where BucketN > 0 and isfinite(BucketAvg)
// Add platform and gpu information
| extend NormalizedGpu = NormalizeGpu(GPU, VramMaxGB)
| extend Platform = DetectPlatform(OS, NormalizedGpu)
| where IsMatchingPlatform(Platform)
| join kind=leftouter (GpuScores) on $left.NormalizedGpu == $right.Model
// Roll-up buckets, summarize hitch and FPS stats
| summarize
    PacketFrameCount  = sum(BucketN),
    PacketTotalMs     = sum(BucketN * BucketAvg),
    AvgFrameMs        = sum(BucketN * BucketAvg) / sum(BucketN),
    HitchesPerHour   = sumif(BucketN, BucketMin >= targetFrameMs) / (max(MetricsTime) / 3600.0),
    VramMaxGB         = any(VramMaxGB),
    MaxForegroundFPS  = any(MaxForegroundFPS),
    Score             = any(Score),
    MasterQuality     = any(MasterQuality),
    DetailShadows     = any(DetailShadows),
    DisplayMode       = any(DisplayMode),
    VSyncLevel        = any(VSyncLevel),
    ScreenPixels      = any(ScreenPixels)
  by MetricsId, TimeGenerated, NormalizedGpu, OS, Platform, Scene, PlayerClientSessionId
// Fill-in synthetic gpu scores for platforms that aren't directly
| extend Score = iff(Platform == "PS5" and isempty(Score), 20000, Score) // Give PS5 a flat 20K
| extend Score = iff(Platform == "SteamDeck" and isempty(Score), 3000, Score) // Most SteamDeck entries have a GPU score, but if not give it a low-tier bucket value
| where PacketFrameCount > 0
;

let packetsWithLevel = packetsCore
// Join the level-up summary and tween character level per packet
| join kind=leftouter (clientSessionIdToLevelUpSummary) on PlayerClientSessionId
| extend TweenedLevel = toint(
      MinLevel
      + iff(MaxLevel > MinLevel and MaxTime > MinTime,
            todouble(datetime_diff('second', TimeGenerated, MinTime))
            / todouble(datetime_diff('second', MaxTime,     MinTime))
            * (MaxLevel - MinLevel),
            0.0)
  )
| extend LevelBucket = toint(bin(TweenedLevel, 10))
;

// ─────────────────────────────────────────────────────────────────────────────
// Conditional join depending on slice param to populate other columns
// - If the join isn't required, it won't be part of the query plan, won't be executed at all.  
// - This saves several minutes of query time, since the level join is expensive.
// ─────────────────────────────────────────────────────────────────────────────
let packetsWithStats = //packetsCore;
    union
    (
        packetsWithLevel
        | where SliceParam in ("level", "class_mastery")
    ),
    (
        packetsCore
        | where SliceParam !in ("level", "class_mastery")
        | extend TweenedLevel = toint(0)
        | extend LevelBucket = toint(0)
        | extend Class = ""
        | extend Mastery = ""
    );


// ─────────────────────────────────────────────────────────────────────────────
// Percentiles across packets
// ─────────────────────────────────────────────────────────────────────────────
let packetFrameTimePercentiles = packetsWithStats
| summarize
      Samples       = count(),
      P50_FPS = 1000.0 / percentile(AvgFrameMs, 50),
      P90_FPS = 1000.0 / percentile(AvgFrameMs, 90),
      P99_FPS = 1000.0 / percentile(AvgFrameMs, 99),
      P99_9_FPS = 1000.0 / percentile(AvgFrameMs, 99.9) 
      by bin(Score, 5000)
| sort by Score asc      
;

let packetFrameTimeChart = packetFrameTimePercentiles
| project-away Samples
| extend Target_60_FPS = 60.0 // the red line
| render linechart
      with (
          title   = "FPS percentiles vs. GPU score",
          xtitle  = "GPU score (lower bound of 5000-wide bin)",
          ytitle  = "Frames per second (FPS)"
      )
;

let packetSamplesChart = packetFrameTimePercentiles
| sort by Score asc
| extend ScoreDim = tostring(Score)
| project ScoreDim, Samples
| render columnchart
    with (
        title  = "Sample count vs. GPU score",
        xtitle = "GPU score (lower bound of 5 000-wide bin)",
        ytitle = "Sample count"     // y-axis is now the count
    )
;

//packetFrameTimeChart
//packetSamplesChart
 
// ─────────────────────────────────────────────────────────────────────────────
// Hitches by slice
// ─────────────────────────────────────────────────────────────────────────────

// Add Slice + OrderKey columns that the caller can use to bucket
let ExtendSlice = (
        T:(
            TimeGenerated:datetime,
            Scene:string,
            AvgFrameMs:double,
            Score:long,
            MasterQuality:int,
            MaxForegroundFPS:int,
            TweenedLevel:int,
            Class:string,
            Mastery:string,
            LevelBucket:int,
            VramMaxGB:int,
            DetailShadows:bool,
            DisplayMode:int,
            VSyncLevel:int,
            ScreenPixels:long
            ),
            
        slice:string )
{
    T
    | extend MaxForegroundFPSBucket   = bin(MaxForegroundFPS, 20)
    | extend ClassMastery = strcat(Class, "_", Mastery)

    | extend Slice = case(
        slice == "scene", tostring(Scene),
        slice == "day",   format_datetime(TimeGenerated, "yyyy-MM-dd"),
        slice == "score", strcat(tostring(bin(Score, 5000))),
        slice == "vramMax", strcat(tostring(VramMaxGB)),
        slice == "maxForegroundFPS",  tostring(MaxForegroundFPSBucket),
        slice == "masterQuality",  tostring(MasterQuality),
        slice == "detailShadows",      tostring(DetailShadows),
        slice == "displayMode",        tostring(DisplayMode),
        slice == "vSyncLevel",         tostring(VSyncLevel),
        slice == "screenPixels",       tostring(bin(ScreenPixels, 1.0)),
        slice == "level", tostring(LevelBucket),
        slice == "class_mastery", tostring(ClassMastery),
        slice == "all",  "all",
        "" )   
     | extend SortKey = case(                  // ONE line covers all sorts
        slice in ("scene", "class_mastery"), double(null),    // string dimensions have a null sort key
        todouble(Slice))
     | where slice != "level" or (SortKey >= 0 and SortKey <= 100) // filter level
     | where slice != "vramMax" or (SortKey >= 2 and SortKey <= 24) // filter vramMax
};

let packetsWithSlice =
    packetsWithStats
    | invoke ExtendSlice(SliceParam)    // adds Slice + OrderKey
;

let frameTimeBySlice =
    packetsWithSlice
    | summarize
          Samples = count(),
          P50_FPS = 1000.0 / percentile(AvgFrameMs, 50),
          P90_FPS = 1000.0 / percentile(AvgFrameMs, 90),
          P99_FPS = 1000.0 / percentile(AvgFrameMs, 99)
        by Slice
    | where isfinite(P50_FPS);          // keep only valid rows

let materializedPacketsWithSlice = materialize(packetsWithSlice);
let totalSampleCount = toscalar(materializedPacketsWithSlice | summarize count());

let packetHitchPercentiles = materializedPacketsWithSlice
| summarize
      Samples            = count(),
      P50_HitchesPerHr   = percentile(HitchesPerHour, 50),
      P75_HitchesPerHr   = percentile(HitchesPerHour, 75),
      P99_HitchesPerHr   = percentile(HitchesPerHour, 99)
      by Slice, SortKey
    | extend SamplesPercent = round(100.0 * Samples / totalSampleCount, 2)
    | where Samples > 20
    | sort by SortKey asc nulls last, Slice asc
    | project-away SortKey
    | project-reorder Slice, Samples, SamplesPercent
;

let packetFpsPercentiles = packetsWithSlice
| summarize
      Samples   = count(),
      P50_FPS   = 1000.0 / percentile(AvgFrameMs, 50),
      P75_FPS   = 1000.0 / percentile(AvgFrameMs, 75),
      P99_FPS   = 1000.0 / percentile(AvgFrameMs, 99)
    by Slice, SortKey
| where Samples >= minBucketSampleCount
| sort by SortKey asc nulls last, Slice asc
| project-away SortKey
| project-reorder Slice, Samples, P50_FPS, P75_FPS, P99_FPS
;

//frameTimeBySlice
//FrameTimeBySlice(now()-10d, now(), "maxForegroundFPS", "")
//packetFrameTimePercentiles
//packetFrameTimeChart
//packetSamplesChart
//packetsOverThreshold
//packetsWithStats
//baseEventQuery

// hitch rate by slice
// packetHitchPercentiles
// | project Slice, P75_HitchesPerHr
// | render columnchart
//       with (
//           title   = "P75 hitches per hour by slice",
//           xtitle  = "Slice",
//           ytitle  = "P75 hitches / hr"
//       )
 
// FPS by slice
packetFpsPercentiles

// Which events are directly tied to client session id
// GameServerLogs
// | where InTimeRange(TimeGenerated)
// | where isnotempty(PlayerClientSessionId)
// | project-reorder TimeGenerated, Message, Category, JsonDetails
// | where Message !contains "Set Level"
// | take 100
// //| summarize arg_max(TimeGenerated, Profile) by PlayerClientSessionId

// GameServerLogs
// | where InTimeRange(TimeGenerated)
// | where isnotempty(PlayerClientSessionId)
// //| where Message !contains "Set Level"
// //| where JsonDetails contains "StartPlayerInitialisation"
// | project-reorder TimeGenerated, Message, Category, JsonDetails, PlayerClientSessionId
// | take 100

//clientSessionIdToLevelUpSummary
//clientSessionIdToAccountId | take 100
//accountToCharacterId | take 100
//levelUpEnriched | take 100
