// ─────────────────────────────────────────────────────────────────────────────
// Parameters – adjust as needed
// ─────────────────────────────────────────────────────────────────────────────
let InTimeRange = (ts:datetime)
{
    ts between (ago(1d) .. now())
    // $__timeFilter(ts) // for Grafana
};
let targetPlatform = "";
let IsMatchingPlatform = (platform:string)
{
    isempty(targetPlatform) or platform has targetPlatform
    //isempty("$platform") or platform has $platform // for Grafana
};
let targetFrameMs  = 50.0;          // "hitch" threshold in milliseconds
let hitchBin       = 50.0;           // histogram bucket width (hitches per hour)
let minSessionTime = 1.0;           // ignore <1 s sessions
let maxSessionTime = 600.0;         // cap sessions at 10 min; set 0 to disable
let minBucketSampleCount = 3;      // minimum number of sessions in a bucket or it will be dropped
let targetProfiles = dynamic(["nightlyrelease"]);

// ─────────────────────────────────────────────────────────────────────────────
// Function to derive the player-platform from OS & NormalizedGpu
// ─────────────────────────────────────────────────────────────────────────────
let DetectPlatform = (os:string, normalizedGpu:string)
{
    // IMPORTANT — do the GPU checks first, then fall back to OS
    case(
        normalizedGpu contains_cs "VANG",              "SteamDeck",   // Steam Deck (Van Gogh APU)
        normalizedGpu contains_cs "native gfx jobs",   "PS5",         // PlayStation 5
        os has "windows",                               "Windows",    // any flavour of Windows
        "Unknown"                                                     // everything else
    )
};

// ─────────────────────────────────────────────────────────────────────────────
// Base event pull
// ─────────────────────────────────────────────────────────────────────────────
let baseEventQuery = playfabevents
| where InTimeRange(Timestamp)
| where FullName_Name has "lastepoch_session_performance_metrics" 
    or (FullName_Name has "lastepoch_client_log" and EventData contains "frameTimeMetrics")// backwards compat with old event format
| extend JsonDetails = tostring(coalesce(EventData.json_details, EventData.jsonDetails)) // backwards compat with old event format
| extend TimeGenerated         = Timestamp
| extend PlayerClientSessionId = tostring(EventData.session)
| extend Scene                 = tostring(parse_json(JsonDetails).scene);

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per performance event
// ─────────────────────────────────────────────────────────────────────────────
let frameMetricsQuery = baseEventQuery
| where InTimeRange(TimeGenerated)
//| project TimeGenerated, PlayerClientSessionId, JsonDetails
| sort by TimeGenerated asc
| extend MetricsId  = strcat(TimeGenerated, "_", PlayerClientSessionId)
| extend d          = parse_json(JsonDetails)
| extend MetricsTime = todouble(d.elapsedTimeSeconds)        // session time at this packet
| extend OS = tostring(d.processMetrics.systemInfo.os)
| extend GPU = tostring(d.processMetrics.systemInfo.gpu)
| extend VramMaxGB = toint(round( todouble(d.processMetrics.systemInfo.maxVramMemory) / 1024.0 ))
| extend MasterQuality = toint(d.graphicsConfig.masterQuality)
| extend LimitForegroundFPS = tobool(d.graphicsConfig.limitForegroundFPS)
| extend MaxForegroundFPS = iff(LimitForegroundFPS, toint(d.graphicsConfig.maxForegroundFPS), toint(200))
// filter for platform (temp)
//| where GPU contains "VANG" // for steamdeck
//| where GPU contains "native gfx jobs" // for ps5

// | where  (MetricsTime >  minSessionTime)
//    and  (maxSessionTime == 0.0 or MetricsTime < maxSessionTime)
;

// ─────────────────────────────────────────────────────────────────────────────
// Frame-time metrics – one row per bucket
// ─────────────────────────────────────────────────────────────────────────────
let frameTimeBuckets = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets                        // → d_frameTimeMetrics_buckets
| extend b         = parse_json(d_frameTimeMetrics_buckets)
| extend BucketMin = todouble(b.min),
         BucketN   = todouble(b.n)
| project TimeGenerated, MetricsId, PlayerClientSessionId,
          BucketMin, BucketN, MetricsTime;

// ─────────────────────────────────────────────────────────────────────────────
// Optional – profile & account look-ups
// ─────────────────────────────────────────────────────────────────────────────
let clientSessionIdToProfile =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | summarize arg_max(TimeGenerated, Profile) by PlayerClientSessionId
    | where Profile !contains "-towns"
    | project PlayerClientSessionId, Profile;

let clientSessionIdToAccountName =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Message has "joined" and Message startswith "Player"
    | extend AccountName = extract(@"Player\s+'?([^']+?)'?\s+joined", 1, Message)
    | where isnotempty(AccountName)
    | summarize arg_max(TimeGenerated, AccountName) by PlayerClientSessionId
    | project PlayerClientSessionId, AccountName;

let clientSessionIdToUnity6 =
    GameServerLogs
    | where InTimeRange(TimeGenerated)
    | where Profile !contains "-towns"
    | where PlayerClientSessionId !contains "HTTP" // for whatever reason, this can be an HTTP error
    | where isnotempty(PlayerClientSessionId)
        | summarize
        LastSeen = arg_max(TimeGenerated, UnityVersion)   // LastSeen = TimeGenerated
      by PlayerClientSessionId, UnityVersion
    //| summarize count() by UnityVersion, PlayerClientSessionId
    | where UnityVersion startswith "6000"
    //| project PlayerClientSessionId, Profile
;

// ─────────────────────────────────────────────────────────────────────────────
// Session metrics event statistics (one per row): FPS, hitch.
// ─────────────────────────────────────────────────────────────────────────────
let packetsWithStats = frameMetricsQuery
| mv-expand d.frameTimeMetrics.buckets
| extend b = parse_json(d_frameTimeMetrics_buckets)
| extend
    BucketN   = todouble(b.n),
    BucketAvg = todouble(b.avg),
    BucketMin = todouble(b.min)
| where BucketN > 0 and isfinite(BucketAvg)
// Add platform and gpu information
| extend NormalizedGpu = NormalizeGpu(GPU, VramMaxGB)
| extend Platform = DetectPlatform(OS, NormalizedGpu)
| where IsMatchingPlatform(Platform)
| join kind=leftouter (GpuScores) on $left.NormalizedGpu == $right.Model
// Roll-up buckets, summarize hitch and FPS stats
| summarize
    PacketFrameCount  = sum(BucketN),
    PacketTotalMs     = sum(BucketN * BucketAvg),
    AvgFrameMs        = sum(BucketN * BucketAvg) / sum(BucketN),
    HitchesPerHour   = sumif(BucketN, BucketMin >= targetFrameMs) / (max(MetricsTime) / 3600.0),
    VramMaxGB         = any(VramMaxGB),
    MaxForegroundFPS  = any(MaxForegroundFPS),
    Score             = any(Score),
    MasterQuality     = any(MasterQuality)
  by MetricsId, TimeGenerated, NormalizedGpu, OS, Platform, Scene
// Fill-in synthetic gpu scores for platforms that aren't directly
| extend Score = iff(Platform == "PS5" and isempty(Score), 20000, Score) // Give PS5 a flat 20K
| extend Score = iff(Platform == "SteamDeck" and isempty(Score), 3000, Score) // Most SteamDeck entries have a GPU score, but if not give it a low-tier bucket value
| where PacketFrameCount > 0
;

// ─────────────────────────────────────────────────────────────────────────────
// Percentiles across packets
// ─────────────────────────────────────────────────────────────────────────────
let packetFrameTimePercentiles = packetsWithStats
| summarize
      Samples       = count(),
      P50_FPS = 1000.0 / percentile(AvgFrameMs, 50),
      P90_FPS = 1000.0 / percentile(AvgFrameMs, 90),
      P99_FPS = 1000.0 / percentile(AvgFrameMs, 99),
      P99_9_FPS = 1000.0 / percentile(AvgFrameMs, 99.9) 
      by bin(Score, 5000)
| sort by Score asc      
;

let packetFrameTimeChart = packetFrameTimePercentiles
| project-away Samples
| extend Target_60_FPS = 60.0 // the red line
| render linechart
      with (
          title   = "FPS percentiles vs. GPU score",
          xtitle  = "GPU score (lower bound of 5000-wide bin)",
          ytitle  = "Frames per second (FPS)"
      )
;

let packetSamplesChart = packetFrameTimePercentiles
| sort by Score asc
| extend ScoreDim = tostring(Score)
| project ScoreDim, Samples
| render columnchart
    with (
        title  = "Sample count vs. GPU score",
        xtitle = "GPU score (lower bound of 5 000-wide bin)",
        ytitle = "Sample count"     // y-axis is now the count
    )
;

//packetFrameTimeChart
//packetSamplesChart
 
// ─────────────────────────────────────────────────────────────────────────────
// Hitches by slice
// ─────────────────────────────────────────────────────────────────────────────
let SliceParam = "maxForegroundFPS";                    // Grafana variable

// Add Slice + OrderKey columns that the caller can use to bucket
let ExtendSlice = (
        T:(
            TimeGenerated:datetime,
            Scene:string,
            AvgFrameMs:double,
            MasterQuality:int,
            MaxForegroundFPS:int,
            VramMaxGB:int),
        slice:string )
{
    T
    | extend MaxForegroundFPSBucket   = bin(MaxForegroundFPS, 20)
    | extend Slice = case(
        slice == "scene", tostring(Scene),
        slice == "day",   format_datetime(TimeGenerated, "yyyy-MM-dd"),
        slice == "vramMax", strcat(tostring(VramMaxGB), " GB"),
        slice == "maxForegroundFPS",  tostring(MaxForegroundFPSBucket),
        slice == "masterQuality",  tostring(MasterQuality),
        "" )
    // Keep ordering on "lower FPS first" (higher AvgFrameMs ⇒ lower FPS)
    | extend OrderKey = 1000.0 / AvgFrameMs
};


let packetsWithSlice =
    packetsWithStats
    | invoke ExtendSlice(SliceParam)    // adds Slice + OrderKey
;

let frameTimeBySlice =
    packetsWithStats
    | invoke ExtendSlice(SliceParam)
    | summarize
          Samples = count(),
          P50_FPS = 1000.0 / percentile(AvgFrameMs, 50),
          P90_FPS = 1000.0 / percentile(AvgFrameMs, 90),
          P99_FPS = 1000.0 / percentile(AvgFrameMs, 99)
        by Slice
    | where isfinite(P50_FPS);          // keep only valid rows

//frameTimeBySlice
//FrameTimeBySlice(now()-10d, now(), "maxForegroundFPS", "")
//packetFrameTimePercentiles
//packetFrameTimeChart
//packetSamplesChart
//packetsOverThreshold
//packetsWithStats
//baseEventQuery

// debugging hitch rate
//packetsWithStats | take 100
packetsWithSlice | take 100