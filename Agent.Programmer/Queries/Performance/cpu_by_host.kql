let minSampleCount   = 1;
let startTime        = ago(30d);
let targetPlayerCount = 1;
let minSessionTime = 60;
let maxSessionTime = 1000.0; // 0 to disable

// Base query to retrieve raw events
let processMetricsQuery =
GameServerLogs
| where TimeGenerated > startTime
| where JsonDetails has "processMetrics"
| project TimeGenerated, Host, JsonDetails, Location, Profile, UnityVersion
| sort by TimeGenerated asc
| extend MetricsId   = strcat(TimeGenerated, "_", Host)
| extend d           = parse_json(JsonDetails)
| extend MetricsTime = todouble(d.elapsedTimeSeconds)
| where maxSessionTime != 0.0 and MetricsTime > minSessionTime and MetricsTime < maxSessionTime;

// Expand cpu histogram bucket, one bucket per row
let processQueryCpu =
processMetricsQuery
| mv-expand d.processMetrics.cpuHistogram
| extend b          = parse_json(d_processMetrics_cpuHistogram)
| extend BucketMin  = todouble(b.min)
| extend BucketN    = todouble(b.n)
| extend BucketAvg  = todouble(b.avg)
| project TimeGenerated, MetricsId, BucketMin, BucketN, BucketAvg,
          Host, MetricsTime, Profile, UnityVersion;

// Roll-up cpu histogram buckets per session
let avgCpuPerSession =
processQueryCpu
| summarize
      TotalSamples    = sum(BucketN),
      WeightedCpuSum  = sum(BucketAvg * BucketN),
      SessionTimeSecs = max(MetricsTime)
    by MetricsId, Host, TimeGenerated, Profile, UnityVersion
| extend AverageCpuPct = WeightedCpuSum / TotalSamples
| project TimeGenerated, MetricsId, AverageCpuPct,
          TotalSamples, SessionTimeSecs, Host, Profile,
          WeightedCpuSum, UnityVersion;

// Roll-up sessions by profile
let avgCpuByProfile =
avgCpuPerSession
| summarize
      ProfileWeightedCpuSum = sum(WeightedCpuSum),
      ProfileTotalSamples   = sum(TotalSamples)
    by Profile, UnityVersion
| extend AverageCpuPct = ProfileWeightedCpuSum / ProfileTotalSamples
| project Profile, AverageCpuPct, ProfileTotalSamples
| sort by AverageCpuPct desc;

let percentilesCpu = avgCpuPerSession
| where TimeGenerated > ago(30d)
| summarize
        p50 = percentile(AverageCpuPct, 50),
        p90 = percentile(AverageCpuPct, 90),
        p99 = percentile(AverageCpuPct, 99)
      //by Profile   // or UnityVersion, Host, etc.
;

percentilesCpu

// // Custom: unity 6 cpu comparison
// avgCpuByProfile
// | where Profile in ("dev1", "nightlyrelease", "nightlymain")
// | project Profile, AverageCpuPct        // pick the 2 columns you want to plot
// | order by Profile asc
// | render columnchart
 
// // Custom: unity 6 cpu vs elapsed session time
// avgCpuPerSession
// | where Profile in ("dev1", "nightlyrelease", "nightlymain")
// | project SessionTimeSecs, AverageCpuPct, Profile
// | summarize AvgCpuPct = avg(AverageCpuPct)    // mean of all sessions in the bin
//           by ElapsedBucket = bin(SessionTimeSecs, 60), Profile
// | render linechart 

//avgCpuPerSession
// GameServerLogs
//| extend IsTargetSet = (Profile has "qa-13") and (UnityVersion has "6000.0.42f1")
//| where (Profile has "qa-13")
//| where IsTargetSet == true
//| where TimeGenerated > ago(3d)
//| summarize count(), avg(AverageCpuPct) by UnityVersion//, bin(TimeGenerated, 1d)

