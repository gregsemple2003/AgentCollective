diff --git a/BizDevAgent/DataStore/FileDataStore.cs b/BizDevAgent/DataStore/FileDataStore.cs
index 4f0f176..619bb1d 100644
--- a/BizDevAgent/DataStore/FileDataStore.cs
+++ b/BizDevAgent/DataStore/FileDataStore.cs
@@ -20,24 +20,5 @@ namespace BizDevAgent.DataStore
         public FileDataStore(string fileName, JsonSerializerSettings settings = null)
         {
-            _fileName = fileName;
-
-            All = new List<TEntity>();
-
-            if (settings == null)
-            {
-                var contractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver
-                {
-                    IgnoreSerializableInterface = true,
-                    IgnoreSerializableAttribute = true
-                };
-                contractResolver.DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
-
-                settings = new JsonSerializerSettings
-                {
-                    ContractResolver = contractResolver
-                };
-            }
-
-            _settings = settings;
+            // deleted
         }
 
@@ -92,23 +73,10 @@ namespace BizDevAgent.DataStore
         private async Task SaveLocal()
         {
-            var json = JsonConvert.SerializeObject(All, Formatting.Indented, _settings);
-            await File.WriteAllTextAsync(_fileName, json);
+            // Method body removed
         }
 
         private async Task<List<TEntity>> GetLocal()
         {
-            // Check if the file exists
-            if (!File.Exists(_fileName))
-            {
-                // Return an empty list or handle accordingly
-                return null;
-            }
-
-            // Read the file content
-            var json = await File.ReadAllTextAsync(_fileName);
-
-            // Deserialize the JSON content back into a List<Company>
-            var all = JsonConvert.DeserializeObject<List<TEntity>>(json, _settings);
-            return all;
+            // Method body removed
         }
 
