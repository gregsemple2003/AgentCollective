
You can further research the code by using the research API to see how particular functions are implemented, or structural questions about the codebase.

    public class CodeQueryAgent : Agent
    {
        private readonly SourceSummaryDataStore _sourceSummaryDataStore;
        private readonly VisualStudioAgent _visualStudioAgent;

        public CodeQueryAgent(SourceSummaryDataStore sourceSummaryDataStore, VisualStudioAgent visualStudioAgent)
        {
            _sourceSummaryDataStore = sourceSummaryDataStore;
            _visualStudioAgent = visualStudioAgent;
        }

        // Prints the names of all files and a short description about each
        public async Task PrintModuleSummary()
        {
            // Logic to print module summary
            var whatever = await _sourceSummaryDataStore.Get(Paths.GetProjectPath());
            Console.WriteLine($"{whatever.DetailedSummary}");
        }

        // Prints the C# code skeleton of the specified file, stripped of method bodies but including comments
        public async Task PrintFileSkeleton(string fileName)
        {
            // Logic to print file skeleton for the specified file
        }

        // Prints the full C# code contents of the specified file without any modifications
        public async Task PrintFileContents(string fileName)
        {
            // Logic to print file contents for the specified file
        }

        // Prints lines from files matching the specified pattern that contain the specified text
        public async Task PrintMatchingSourceLines(string fileMatchingPattern, string text)
        {
            // Logic to print matching source lines based on the pattern and text
        }

        // Prints the source code of the specified method or function within a given class
        public async Task PrintFunctionSourceCode(string className, string methodOrFunctionName)
        {
            // Logic to print the source code for the specified function or method
        }
    }
}

To write more queries, you can use the following structure:

using BizDevAgent.Agents;
using System.Threading.Tasks;

namespace BizDevAgent.Jobs
{
	// A comment that describes why we are performing the research request
    public class CodeResearchJob_YourGuidHere : Job
    {
        private readonly CodeQueryAgent _codeQueryAgent;

        public CodeResearchJob_YourGuidHere(CodeQueryAgent codeQueryAgent)
        {
            _codeQueryAgent = codeQueryAgent;
        }

        public async override Task Run()
        {
            // Your calls to _codeQueryAgent go here
        }
    }
}